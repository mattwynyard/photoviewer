[{"S:\\website\\photoviewer\\client\\src\\index.js":"1","S:\\website\\photoviewer\\client\\src\\Main.js":"2","S:\\website\\photoviewer\\client\\src\\serviceWorker.js":"3","S:\\website\\photoviewer\\client\\src\\Data.js":"4","S:\\website\\photoviewer\\client\\src\\Report.js":"5","S:\\website\\photoviewer\\client\\src\\App.js":"6","S:\\website\\photoviewer\\client\\src\\CustomNav.js":"7","S:\\website\\photoviewer\\client\\src\\DynamicDropdown.js":"8","S:\\website\\photoviewer\\client\\src\\CustomModal.js":"9","S:\\website\\photoviewer\\client\\src\\Drawer.js":"10","S:\\website\\photoviewer\\client\\src\\ToolsMenu.js":"11","S:\\website\\photoviewer\\client\\src\\VideoCard.js":"12","S:\\website\\photoviewer\\client\\src\\PhotoModal.js":"13","S:\\website\\photoviewer\\client\\src\\ArchivePhotoModal.js":"14","S:\\website\\photoviewer\\client\\src\\GLEngine.js":"15","S:\\website\\photoviewer\\client\\src\\util.js":"16","S:\\website\\photoviewer\\client\\src\\PositionControl.js":"17","S:\\website\\photoviewer\\client\\src\\MediaPlayerControl.js":"18","S:\\website\\photoviewer\\client\\src\\L.CanvasOverlay.js":"19","S:\\website\\photoviewer\\client\\src\\Vector2D.js":"20","S:\\website\\photoviewer\\client\\src\\shaders.js":"21","S:\\website\\photoviewer\\client\\src\\components\\searchBar.js":"22"},{"size":603,"mtime":1601929236389,"results":"23","hashOfConfig":"24"},{"size":609,"mtime":1613679015859,"results":"25","hashOfConfig":"24"},{"size":5086,"mtime":1589839304022,"results":"26","hashOfConfig":"24"},{"size":2678,"mtime":1613698966687,"results":"27","hashOfConfig":"24"},{"size":18140,"mtime":1611276860708,"results":"28","hashOfConfig":"24"},{"size":96130,"mtime":1625617625168,"results":"29","hashOfConfig":"24"},{"size":1267,"mtime":1601929236331,"results":"30","hashOfConfig":"24"},{"size":1243,"mtime":1591046122069,"results":"31","hashOfConfig":"24"},{"size":20944,"mtime":1601929236295,"results":"32","hashOfConfig":"24"},{"size":2820,"mtime":1611868991748,"results":"33","hashOfConfig":"24"},{"size":1157,"mtime":1611691845441,"results":"34","hashOfConfig":"24"},{"size":10067,"mtime":1615161894723,"results":"35","hashOfConfig":"24"},{"size":7875,"mtime":1625625497064,"results":"36","hashOfConfig":"24"},{"size":5731,"mtime":1606267300960,"results":"37","hashOfConfig":"24"},{"size":24453,"mtime":1625612380531,"results":"38","hashOfConfig":"24"},{"size":3940,"mtime":1625519062301,"results":"39","hashOfConfig":"24"},{"size":600,"mtime":1589839303659,"results":"40","hashOfConfig":"24"},{"size":604,"mtime":1607034864202,"results":"41","hashOfConfig":"24"},{"size":4786,"mtime":1624926015963,"results":"42","hashOfConfig":"24"},{"size":2821,"mtime":1625171497131,"results":"43","hashOfConfig":"24"},{"size":5064,"mtime":1625519062292,"results":"44","hashOfConfig":"24"},{"size":1149,"mtime":1625519062284,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1ps959",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},"S:\\website\\photoviewer\\client\\src\\index.js",[],["96","97"],"S:\\website\\photoviewer\\client\\src\\Main.js",[],"S:\\website\\photoviewer\\client\\src\\serviceWorker.js",[],"S:\\website\\photoviewer\\client\\src\\Data.js",[],"S:\\website\\photoviewer\\client\\src\\Report.js",["98","99","100","101","102","103","104","105","106","107","108","109","110"],"import React from 'react';\r\nimport './Report.css';\r\nimport './CustomNav.js';\r\nimport { Link } from \"react-router-dom\";\r\nimport {Navbar, Nav}  from 'react-bootstrap';\r\nimport CustomNav from './CustomNav.js';\r\nimport Chart from 'chart.js';\r\n\r\nconst NO_COLORS = 9;\r\n\r\nclass Report extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: props.location.project.surface,\r\n        }\r\n        \r\n    }\r\n\r\n    addMap(map, data) {\r\n        if (map.has(data)) {\r\n            let n = map.get(data);\r\n            n = n + 1;\r\n            map.set(data, n); \r\n        } else {\r\n            if (data !== 0) {\r\n                map.set(data, 1); \r\n            }   \r\n        }\r\n        return map;\r\n    }\r\n\r\n    buildColorTable(count) {\r\n        let arr = [];\r\n        for(let i = 0; i < count; i++) {\r\n            arr.push(this.colorMap[i]);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    clickChart(e) {\r\n        console.log(this.gradeChart.getElementsAtEvent(e));\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.colorMap = [\r\n            \"#FFC857\", \"#058ED9\", \"#BDD9BF\", \"#E8F086\", \"#6FDE6E\", \"#FF4242\", \"#A691AE\", \"#235FA4\", \"#0A284B\", \"#848FA2\"\r\n        ];\r\n        \r\n        if(this.state.mode === \"footpath\") {\r\n            this.gradeMap = new Map();\r\n            this.faultMap = new Map();\r\n            this.causeMap = new Map();\r\n            this.surfaceMap = new Map();\r\n            this.data.forEach(item => {\r\n                this.faultMap = this.addMap(this.faultMap, item.fault);\r\n                this.causeMap = this.addMap(this.causeMap, item.cause);\r\n                this.surfaceMap = this.addMap(this.surfaceMap, item.fpsurface);\r\n                this.gradeMap = this.addMap(this.gradeMap, item.grade);\r\n            });\r\n\r\n            let gradeData = Array.from(this.gradeMap, ([name, value]) => ({ name, value }));\r\n            //let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n            let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n            let causeData = Array.from(this.causeMap, ([name, value]) => ({ name, value }));\r\n            let surfaceData = Array.from(this.surfaceMap, ([name, value]) => ({ name, value }));\r\n            gradeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            //faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            causeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            surfaceData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            let faultTop = faultData.slice(0, NO_COLORS);\r\n            let faultBottom = faultData.slice(NO_COLORS, faultData.length);\r\n            let causeTop = causeData.slice(0, NO_COLORS);\r\n            let causeBottom = causeData.slice( NO_COLORS, causeData.length);\r\n            let surfaceTop = surfaceData.slice(0, NO_COLORS);\r\n            let surfaceBottom = surfaceData.slice(NO_COLORS, surfaceData.length);\r\n            let value1 = 0;\r\n            let value2 = 0;\r\n            let value3 = 0;\r\n            faultBottom.forEach(item => {\r\n                value1 += item.value;\r\n            });\r\n            causeBottom.forEach(item => {\r\n                value2 += item.value;\r\n            });\r\n            surfaceBottom.forEach(item => {\r\n                value3 += item.value;\r\n            });\r\n            let others1 = {name: \"Others\", value: value1};\r\n            let others2 = {name: \"Others\", value: value2};\r\n            let others3 = {name: \"Others\", value: value3};\r\n            faultTop.push(others1);\r\n            causeTop.push(others2);\r\n            surfaceTop.push(others3);\r\n           \r\n            var ctx = document.getElementById('myChart').getContext(\"2d\");\r\n            this.gradeChart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: gradeData.map((gradeData) => gradeData.name + \": \" + gradeData.value),\r\n                    datasets: [{\r\n                        data: gradeData.map((gradeData) => gradeData.value),\r\n                        backgroundColor: [\r\n                            'rgba(0, 204, 0, 1)',\r\n                            'rgba(255, 128, 0, 1)',\r\n                            'rgba(255, 0, 255, 1)',\r\n                            'rgba(0, 0, 255, 1)',\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(0, 204, 0, 1)',\r\n                            'rgba(255, 128, 0, 1)',\r\n                            'rgba(255, 0, 255, 1)',\r\n                            'rgba(0, 0, 255, 1)',    \r\n                        ],\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    onClick: (e) => {\r\n                        this.clickChart(e);\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        position: 'top',\r\n                        text: 'Grade',\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        fullWidth: false,\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade1\").getContext('2d');\r\n            this.g1Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: faultTop.map((faultTop) => faultTop.name + \": \" + faultTop.value),\r\n                    datasets: [{\r\n                        data: faultTop.map((faultTop) => faultTop.value),\r\n                        backgroundColor: this.buildColorTable(faultTop.length),\r\n                        borderColor: this.buildColorTable(faultTop.length),\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    title: {\r\n                        display: true,\r\n                        position: 'top',\r\n                        text: 'Fault Type',\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        fullWidth: false,\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade2\").getContext('2d');\r\n            var g2Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n            data: {\r\n                labels: causeTop.map((causeTop) => causeTop.name + \": \" + causeTop.value),\r\n                datasets: [{\r\n                    data: causeTop.map((causeTop) => causeTop.value),\r\n                    backgroundColor: this.buildColorTable(causeTop.length),\r\n                    borderColor: this.buildColorTable(causeTop.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Cause',\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade3\").getContext('2d');\r\n                var g3Chart = new Chart(ctx, {\r\n                    type: 'doughnut',\r\n                data: {\r\n                    labels: surfaceTop.map((surfaceTop) => surfaceTop.name + \": \" + surfaceTop.value),\r\n                    datasets: [{\r\n                        data: surfaceTop.map((surfaceTop) => surfaceTop.value),\r\n                        backgroundColor: this.buildColorTable(surfaceTop.length),\r\n                        borderColor: this.buildColorTable(surfaceTop.length),\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Surface',\r\n                        padding: 5,\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n                });\r\n            \r\n        } else {\r\n            this.gradeMap = new Map();\r\n            this.g1Map = new Map();\r\n            this.g2Map = new Map();\r\n            this.g3Map = new Map();\r\n            this.data.forEach(item => {\r\n                if (item.priority !== 0 ) {\r\n                    if (item.priority === 99) {\r\n                        item.priority = \"Signage\";\r\n                    } else {\r\n                        item.priority = \"Priority: \" + item.priority;\r\n                    }\r\n                }\r\n                switch(item.priority) {\r\n                    case  \"Priority: 1\":\r\n                        this.g1Map = this.addMap(this.g1Map, item.fault);\r\n                        break;\r\n                    case  \"Priority: 2\":\r\n                        this.g2Map = this.addMap(this.g2Map, item.fault);\r\n                        break;\r\n                    case  \"Priority: 3\":\r\n                        this.g3Map = this.addMap(this.g3Map, item.fault);\r\n                        break;\r\n                    default:\r\n                        break;\r\n\r\n                }\r\n                this.gradeMap = this.addMap(this.gradeMap, item.priority);\r\n                //this.faultMap = this.addMap(this.faultMap, item.class);\r\n            });\r\n\r\n            let gradeData = Array.from(this.gradeMap, ([name, value]) => ({ name, value }));\r\n        //let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n        let g1Data = Array.from(this.g1Map, ([name, value]) => ({ name, value }));\r\n        let g2Data = Array.from(this.g2Map, ([name, value]) => ({ name, value }));\r\n        let g3Data = Array.from(this.g3Map, ([name, value]) => ({ name, value }));\r\n        gradeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        //faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g1Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g2Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g3Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        let g1Top = g1Data.slice(0, NO_COLORS);\r\n        let g1Bottom = g1Data.slice(NO_COLORS, g1Data.length);\r\n        let g2Top = g2Data.slice(0, NO_COLORS);\r\n        let g2Bottom = g2Data.slice(NO_COLORS, g2Data.length);\r\n        let g3Top = g3Data.slice(0, NO_COLORS);\r\n        let g3Bottom = g3Data.slice(NO_COLORS, g3Data.length);\r\n        let value1 = 0;\r\n        let value2 = 0;\r\n        let value3 = 0;\r\n        g1Bottom.forEach(item => {\r\n            value1 += item.value;\r\n        });\r\n        g2Bottom.forEach(item => {\r\n            value2 += item.value;\r\n        });\r\n        g3Bottom.forEach(item => {\r\n            value3 += item.value;\r\n        });\r\n        let others1 = {name: \"Others\", value: value1};\r\n        let others2 = {name: \"Others\", value: value2};\r\n        let others3 = {name: \"Others\", value: value3};\r\n        g1Top.push(others1);\r\n        g2Top.push(others2);\r\n        g3Top.push(others3);\r\n       \r\n        var ctx = document.getElementById('myChart').getContext(\"2d\");\r\n        let colorTable = this.buildColorTable(g1Top.length);\r\n        this.gradeChart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: gradeData.map((gradeData) => gradeData.name + \": \" + gradeData.value),\r\n                datasets: [{\r\n                    data: gradeData.map((gradeData) => gradeData.value),\r\n                    backgroundColor: [\r\n                        'rgba(0, 204, 0, 1)',\r\n                        'rgba(255, 128, 0, 1)',\r\n                        'rgba(255, 0, 255, 1)',\r\n                        'rgba(0, 0, 255, 1)',\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(0, 204, 0, 1)',\r\n                        'rgba(255, 128, 0, 1)',\r\n                        'rgba(255, 0, 255, 1)',\r\n                        'rgba(0, 0, 255, 1)',    \r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                onClick: (e) => {\r\n                    this.clickChart(e);\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade1\").getContext('2d');\r\n        var g1Chart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: g1Top.map((g1Top) => g1Top.name + \": \" + g1Top.value),\r\n                datasets: [{\r\n                    data: g1Top.map((g1Top) => g1Top.value),\r\n                    backgroundColor: this.buildColorTable(g1Top.length),\r\n                    borderColor: this.buildColorTable(g1Top.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    position: 'top',\r\n                    text: 'Priority 1',\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    fullWidth: false,\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade2\").getContext('2d');\r\n        var g2Chart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n        data: {\r\n            labels: g2Top.map((g2Top) => g2Top.name + \": \" + g2Top.value),\r\n            datasets: [{\r\n                data: g2Top.map((g2Top) => g2Top.value),\r\n                backgroundColor: this.buildColorTable(g2Top.length),\r\n                borderColor: this.buildColorTable(g2Top.length),\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            title: {\r\n                display: true,\r\n                text: 'Priority 2',\r\n            },\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            legend: {\r\n                position: 'right',\r\n                labels: {\r\n                    padding: 10,\r\n                    boxWidth: 12\r\n                }\r\n            }\r\n        }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade3\").getContext('2d');\r\n            var g3Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n            data: {\r\n                labels: g3Top.map((g3Top) => g3Top.name + \": \" + g3Top.value),\r\n                datasets: [{\r\n                    data: g3Top.map((g3Top) => g3Top.value),\r\n                    backgroundColor: this.buildColorTable(g3Top.length),\r\n                    borderColor: this.buildColorTable(g3Top.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Priority 3',\r\n                    padding: 5,\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n            });\r\n           \r\n        }\r\n            \r\n            \r\n        \r\n    }\r\n    render() {\r\n        const { login } = this.props.location\r\n        const { user } = this.props.location\r\n        const { data } = this.props.location\r\n        this.user = user;\r\n        this.login = login;\r\n        this.data = data;\r\n        \r\n    return (\r\n        <div> \r\n            <Navbar bg=\"light\" expand=\"lg\"> \r\n        \r\n          <Navbar.Brand href=\"#home\">\r\n          <img\r\n              src=\"logo.png\"\r\n              width=\"122\"\r\n              height=\"58\"\r\n              className=\"d-inline-block align-top\"\r\n              alt=\"logo\"\r\n            />\r\n          </Navbar.Brand>\r\n          <Nav> \r\n            <Link className=\"dropdownlink\" to={'/'} style={{ textDecoration: 'none' }}>Home</Link>\r\n            </Nav>\r\n            <CustomNav title={this.user}></CustomNav>\r\n            </Navbar>\r\n            \r\n            <div className=\"chartParent\">\r\n            <div className = \"gradediv\">\r\n                    <canvas className=\"gradeChart\" id=\"myChart\"></canvas>  \r\n                </div>\r\n                <div className = \"g1div\">\r\n                    <canvas className=\"g1Chart\" id=\"grade1\"></canvas>  \r\n                </div>\r\n                <div className = \"g2div\">\r\n                    <canvas className=\"g2Chart\" id=\"grade2\"></canvas>  \r\n                </div>\r\n                <div className = \"g3div\">\r\n                    <canvas className=\"g3Chart\" id=\"grade3\"></canvas>  \r\n                </div>\r\n                \r\n            </div>    \r\n      </div> \r\n    );\r\n    }\r\n}\r\nexport default Report;\r\n  \r\n","S:\\website\\photoviewer\\client\\src\\App.js",["111","112","113","114","115"],"S:\\website\\photoviewer\\client\\src\\CustomNav.js",[],"S:\\website\\photoviewer\\client\\src\\DynamicDropdown.js",[],"S:\\website\\photoviewer\\client\\src\\CustomModal.js",[],"S:\\website\\photoviewer\\client\\src\\Drawer.js",[],"S:\\website\\photoviewer\\client\\src\\ToolsMenu.js",[],"S:\\website\\photoviewer\\client\\src\\VideoCard.js",[],"S:\\website\\photoviewer\\client\\src\\PhotoModal.js",["116"],"import { FieldBinaryOutlined } from '@ant-design/icons';\r\nimport React from 'react';\r\nimport {Modal, Button}  from 'react-bootstrap';\r\nimport {pad} from  './util.js'\r\n\r\nexport default class PhotoModal extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            marker: [],\r\n            amazon: null,\r\n            show: false,\r\n            photo: null,\r\n\r\n        }\r\n    }\r\n\r\n    showModal(show, marker, amazon) {\r\n      this.setState({marker: marker});\r\n      this.setState({photo: marker[0].photo});\r\n      this.setState({amazon: amazon});\r\n      this.setState({show: show});\r\n\r\n    }\r\n\r\n    setArchiveModal(show, marker, amazon) {\r\n      this.setState({marker: marker});\r\n      this.setState({amazon: amazon});\r\n      this.setState({photo: marker[0].photo});\r\n      this.setState({show: show});\r\n\r\n    }\r\n\r\n    getPhoto(direction) {\r\n      let photo = this.state.photo;\r\n      let intSuffix = (parseInt(photo.slice(photo.length - 5, photo.length)));\r\n      let n = null;\r\n      if (direction === \"prev\") {\r\n        n = intSuffix - 1;\r\n      } else {\r\n        n = intSuffix + 1;\r\n      }\r\n      let newSuffix = pad(n, 5);\r\n      let prefix = photo.slice(0, photo.length - 5);\r\n      let newPhoto = prefix + newSuffix;\r\n      return newPhoto;\r\n    }\r\n\r\n    clickPrev = (e) => {\r\n      e.preventDefault();\r\n      const newPhoto = this.getPhoto(\"prev\");\r\n      this.setState({photo: newPhoto});\r\n    }\r\n        \r\n    clickNext = (e) => {\r\n      e.preventDefault();\r\n      const newPhoto = this.getPhoto(\"next\");\r\n      this.setState({photo: newPhoto});\r\n    };\r\n      \r\n    closePhotoModal = () => {\r\n        this.setState({show: false});     \r\n    };\r\n\r\n      /**\r\n     * Copies the lat lng from photo modal to users clipboard\r\n     * @param {*} e button lcick event\r\n     * @param {*} latlng Leaflet latlng object\r\n     */\r\n    copyToClipboard(e, latlng) {\r\n      e.preventDefault();\r\n      console.log(latlng)\r\n      const position = latlng.lat + \" \" + latlng.lng\r\n      navigator.clipboard.writeText(position);\r\n    }\r\n\r\n    render() {\r\n      const DataColumn = (props) => {\r\n        return (\r\n            <div>\r\n            {props.data.map((field, index) => \r\n              <DataRow key={index.toString()} name={field.name} data={field.data} symbol={field.symbol}></DataRow>    \r\n            )}\r\n            </div>\r\n        );\r\n      }\r\n      const DataRow = (props) => {\r\n        return (\r\n            <div>\r\n            {props.data ? <div><b>{props.name}</b>{props.data}{props.symbol}</div>: null}\r\n            </div>\r\n        );\r\n      }\r\n      const CustomTable = (props) => {\r\n        console.log(props.obj)\r\n        if(props.obj.type === \"road\") {\r\n          return (\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <DataColumn className=\"col-md-4\" data={[\r\n                    {name: \"Fault ID: \", data: props.obj.id},\r\n                    {name: \"Priority: \", data: props.obj.priority},\r\n                    {name: \"Road ID: \", data: props.obj.roadid},\r\n                    {name: \"Carriage ID: \", data: props.obj.carriage},\r\n                    {name: \"Location: \", data: props.obj.location}\r\n                    ]}>\r\n                  </DataColumn>   \r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <DataColumn className=\"col-md-4\"data={[\r\n                      {name: \"Fault: \", data: props.obj.fault},\r\n                      {name: \"Repair: \", data: props.obj.repair},\r\n                      {name: \"Width: \", data: props.obj.width, symbol: \" m\"},\r\n                      {name: \"Length: \", data: props.obj.length, symbol: \" m\"},\r\n                      {name: \"Count: \", data: props.obj.count}\r\n                      ]}>\r\n                  </DataColumn>\r\n                  </div>\r\n                <div className=\"col-md-4\">\r\n                  <DataColumn className=\"col-md-4\"data={[\r\n                      {name: \"Start ERP: \", data: props.obj.starterp},\r\n                      {name: \"End ERP: \", data: props.obj.enderp},\r\n                      {name: \"DateTime: \", data: props.obj.datetime},\r\n                      ]}>\r\n\r\n                </DataColumn>\r\n                <b>{\"Lat: \"}</b>{props.obj.latlng.lat}<b>{\" Lng: \"}</b>{props.obj.latlng.lng + \"  \"}\r\n                  <Button variant=\"outline-secondary\" \r\n                    size=\"sm\" \r\n                    onClick={props.copy} \r\n                    active >Copy\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\t \r\n          );\r\n        } else if(props.obj.type === \"footpath\") {      \r\n          return (\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-md-4\">\r\n                  <DataColumn className=\"col-md-4\" data={[\r\n                    {name: \"Fault ID: \", data: props.obj.id},\r\n                    {name: \"Grade: \", data: props.obj.grade},\r\n                    {name: \"Road ID: \", data: props.obj.roadid},\r\n                    {name: \"Footpath ID: \", data: props.obj.footpathid},\r\n                    {name: \"Location: \", data: props.obj.roadname}\r\n                    ]}>\r\n                  </DataColumn>   \r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                  <DataColumn className=\"col-md-4\"data={[\r\n                      {name: \"Fault: \", data: props.obj.fault},\r\n                      {name: \"Cause: \", data: props.obj.cause},\r\n                      {name: \"Width: \", data: props.obj.width, symbol: \" m\"},\r\n                      {name: \"Length: \", data: props.obj.length, symbol: \" m\"},\r\n                      {name: \"Count: \", data: props.obj.count}\r\n                      ]}>\r\n                  </DataColumn>\r\n                  </div>\r\n                <div className=\"col-md-4\">\r\n                  <DataColumn className=\"col-md-4\"data={[\r\n                      {name: \"Start ERP: \", data: props.obj.starterp},\r\n                      {name: \"End ERP: \", data: props.obj.enderp},\r\n                      {name: \"DateTime: \", data: props.obj.datetime},\r\n                      ]}>\r\n\r\n                </DataColumn>\r\n                <b>{\"Lat: \"}</b>{props.obj.latlng.lat}<b>{\" Lng: \"}</b>{props.obj.latlng.lng + \"  \"}\r\n                  <Button variant=\"outline-secondary\" \r\n                    size=\"sm\" \r\n                    onClick={props.copy} \r\n                    active >Copy\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </div>\t  \r\n          );     \r\n        } else {\r\n          return (\r\n            null\r\n          );\r\n        }     \r\n      }\r\n\r\n      return (\r\n      <Modal dialogClassName={\"photoModal\"} \r\n          show={this.state.show} \r\n          size='xl' \r\n          centered={true}\r\n          onHide={this.closePhotoModal}\r\n      >\r\n      <Modal.Body className=\"photoBody\">\t\r\n        <div className=\"container\">\r\n        {this.state.marker.map((obj, index) => \r\n          <img\r\n            key={`${index}`}  \r\n            className=\"photo\" \r\n            alt=\"fault\"\r\n            src={this.state.amazon + this.state.photo + \".jpg\"} \r\n              >\r\n          </img>\r\n        )}\r\n          <img \r\n            className=\"leftArrow\" \r\n            src={\"leftArrow_128.png\"} \r\n            alt=\"left arrow\"\r\n            onClick={this.clickPrev}/> \r\n          <img \r\n            className=\"rightArrow\" \r\n            src={\"rightArrow_128.png\"} \r\n            alt=\"right arrow\"\r\n            onClick={this.clickNext}/>         \r\n        </div>\r\n      </Modal.Body >\r\n      <Modal.Footer>\r\n        <CustomTable \r\n          obj={this.state.marker[0]}\r\n          copy={(e) => this.copyToClipboard(e, this.state.latlng)}\r\n          >      \r\n        </CustomTable >\r\n      </Modal.Footer>\r\n    </Modal>\r\n    );\r\n  }\r\n}","S:\\website\\photoviewer\\client\\src\\ArchivePhotoModal.js",[],"S:\\website\\photoviewer\\client\\src\\GLEngine.js",["117","118","119"],"S:\\website\\photoviewer\\client\\src\\util.js",["120"],"const EARTH_RADIUS = 6378137.0 //metres\r\nconst TILE_SIZE = 256\r\nconst EARTH_EQUATOR = 40075016.68557849\r\n\r\nconst RDP = (l, eps) => {\r\n    const last = l.length - 1;\r\n    const p1 = l[0];\r\n    const p2 = l[last];\r\n    const x21 = p2.x - p1.x;\r\n    const y21 = p2.y - p1.y;\r\n   \r\n    const [dMax, x] = l.slice(1, last)\r\n        .map(p => Math.abs(y21 * p.x - x21 * p.y + p2.x * p1.y - p2.y * p1.x))\r\n        .reduce((p, c, i) => {\r\n          const v = Math.max(p[0], c);\r\n          return [v, v === p[0] ? p[1] : i + 1];\r\n        }, [-1, 0]);\r\n   \r\n    if (dMax > eps) {\r\n      return [...RDP(l.slice(0, x + 1), eps), ...RDP(l.slice(x), eps).slice(1)];\r\n    }\r\n    return [l[0], l[last]]\r\n  };\r\n\r\n  let LatLongToPixelXY = (latitude, longitude) => {\r\n    let pi_180 = Math.PI / 180.0;\r\n    let pi_4 = Math.PI * 4;\r\n    let sinLatitude = Math.sin(latitude * pi_180);\r\n    let pixelX = ((longitude + 180) / 360) * TILE_SIZE;\r\n    let pixelY = (0.5 - Math.log((1 + sinLatitude) / (1 - sinLatitude)) / (pi_4)) * TILE_SIZE;\r\n    let pixel = { x: pixelX, y: pixelY };\r\n    return pixel;\r\n  };\r\n\r\n  let ShpericalLatLongToPixelXY = (latitude, longitude) => {\r\n    let equator = 40075016.68557849;\r\n    let pixelX = (longitude + (equator / 2.0)) / (equator / TILE_SIZE);\r\n    let pixelY = (latitude - (equator / 2.0)) / (equator / TILE_SIZE);\r\n    let pixel = { x: pixelX, y: pixelY };\r\n    return pixel;\r\n  };\r\n\r\n  /**\r\n   * Calculates distance on earth surface\r\n   */\r\n  let calcGCDistance = (distance) => {\r\n    return distance * EARTH_RADIUS * (Math.PI /180);\r\n  }\r\n\r\n  function sleep(milliseconds) {\r\n    const date = Date.now();\r\n    let currentDate = null;\r\n    do {\r\n      currentDate = Date.now();\r\n    } while (currentDate - date < milliseconds);\r\n  }\r\n\r\n  function translateMatrix(matrix, tx, ty) {\r\n    // translation is in last column of matrix\r\n    matrix[12] += matrix[0] * tx + matrix[4] * ty;\r\n    matrix[13] += matrix[1] * tx + matrix[5] * ty;\r\n    matrix[14] += matrix[2] * tx + matrix[6] * ty;\r\n    matrix[15] += matrix[3] * tx + matrix[7] * ty;\r\n  }\r\n  \r\n  function scaleMatrix(matrix, scaleX, scaleY) {\r\n    // scaling x and y, which is just scaling first two columns of matrix\r\n    matrix[0] *= scaleX;\r\n    matrix[1] *= scaleX;\r\n    matrix[2] *= scaleX;\r\n    matrix[3] *= scaleX;\r\n    matrix[4] *= scaleY;\r\n    matrix[5] *= scaleY;\r\n    matrix[6] *= scaleY;\r\n    matrix[7] *= scaleY;\r\n  }\r\n  \r\n  // Returns a random integer from 0 to range - 1.\r\n  function randomInt(range) {\r\n    return Math.floor(Math.random() * range);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {the number to pad} n \r\n   * @param {the amount of pading} width \r\n   * @param {digit to pad out number with (default '0'} z \r\n   * @return {the padded number (string)}\r\n   */\r\n  function pad(n, width, z) {\r\n    z = z || '0';\r\n    n = n + '';\r\n    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n    }\r\n\r\n  /**\r\n   * returns a random hex color\r\n   */\r\n  function getColor() {\r\n    return '#' +  Math.random().toString(16).substr(-6);\r\n  }\r\n\r\n  function formatDate(date) {\r\n    let tokens = date.split(\"_\");\r\n    let month = getMonth(tokens[1]);\r\n    return month + \" \" + tokens[0];\r\n  }\r\n\r\n  function getMonth(month) {\r\n    switch(month) {\r\n      case \"01\":\r\n        return \"January\";\r\n      case \"02\":\r\n        return \"Feburary\";\r\n      case \"03\":\r\n        return \"March\";\r\n      case \"04\":\r\n        return \"April\";\r\n      case \"05\":\r\n        return \"May\";\r\n      case \"06\":\r\n        return \"June\";\r\n      case \"07\":\r\n        return \"July\";\r\n      case \"08\":\r\n        return \"August\";\r\n      case \"09\":\r\n        return \"September\";\r\n      case \"10\":\r\n        return \"October\";\r\n      case \"11\":\r\n        return \"November\";\r\n      case \"12\":\r\n        return \"December\";\r\n      default:\r\n        return month\r\n    }\r\n  }\r\n\r\n  export {RDP, LatLongToPixelXY, ShpericalLatLongToPixelXY, translateMatrix, scaleMatrix, randomInt, pad, getColor, getMonth, formatDate, calcGCDistance, sleep}","S:\\website\\photoviewer\\client\\src\\PositionControl.js",[],"S:\\website\\photoviewer\\client\\src\\MediaPlayerControl.js",[],"S:\\website\\photoviewer\\client\\src\\L.CanvasOverlay.js",[],"S:\\website\\photoviewer\\client\\src\\Vector2D.js",[],"S:\\website\\photoviewer\\client\\src\\shaders.js",["121"],"/**\r\n * Creates and compiles a shader.\r\n *\r\n * @param {!WebGLRenderingContext} gl The WebGL Context.\r\n * @param {string} shaderSource The GLSL source code for the shader.\r\n * @param {number} shaderType The type of shader, VERTEX_SHADER or\r\n *     FRAGMENT_SHADER.\r\n * @return {!WebGLShader} The shader.\r\n */\r\n export let compileShader = (gl, shaderSource, shaderType) => {\r\n    // Create the shader object\r\n    var shader = gl.createShader(shaderType);\r\n    // Set the shader source code.\r\n    gl.shaderSource(shader, shaderSource);\r\n    // Compile the shader\r\n    gl.compileShader(shader);\r\n    // Check if it compiled\r\n    var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\r\n    if (!success) {\r\n        // Something went wrong during compilation; get the error\r\n        throw \"could not compile shader:\" + gl.getShaderInfoLog(shader);\r\n    }\r\n    return shader;\r\n};\r\n\r\n/**\r\n* Creates a program from 2 shaders.\r\n*\r\n* @param {!WebGLRenderingContext) gl The WebGL context.\r\n* @param {!WebGLShader} vertexShader A vertex shader.\r\n* @param {!WebGLShader} fragmentShader A fragment shader.\r\n* @return {!WebGLProgram} A program.\r\n*/\r\nexport let createProgram = (gl, vertexShader, fragmentShader) => {\r\n// create a program.\r\nvar program = gl.createProgram();\r\ngl.attachShader(program, vertexShader);\r\ngl.attachShader(program, fragmentShader);\r\ngl.linkProgram(program);\r\nlet success = gl.getProgramParameter(program, gl.LINK_STATUS);\r\nif (!success) {\r\n    alert(\"program failed to link:\" + gl.getProgramInfoLog (program));\r\n}\r\nreturn program;\r\n};\r\n\r\n// inspired a lot by https://prideout.net/emulating-double-precision\r\n// also https://faistos18.github.io/webGL_leaflet_precise_points you legend!\r\n\r\nexport let vshaderLine = \r\n`#version 300 es\r\nprecision highp float;\r\nattribute vec3 a_vertex;\r\nattribute vec3 a_vertex_low;\r\nattribute float a_pointSize;\r\nattribute vec4 a_color;\r\nattribute vec3 a_prev;\r\nattribute vec3 a_current;\r\nattribute vec3 a_next;\r\n\r\nuniform mat4 u_matrix;\r\nuniform vec3 u_eyepos;\r\nuniform vec3 u_eyepos_low;\r\nuniform float thickness;\r\n\r\nvarying vec4 v_color;\r\nvarying float v_index;\r\n\r\nvoid main() {\r\n\r\n// pass the color to the fragment shader\r\nv_color = a_color;\r\n}`\r\n\r\nexport let vshader300 = \r\n`#version 300 es\r\nprecision highp float;\r\nuniform mat4 u_matrix;\r\nuniform vec3 u_eyepos;\r\nuniform vec3 u_eyepos_low;\r\nin vec3 a_vertex;\r\nin vec3 a_vertex_low;\r\nin float a_pointSize;\r\nin vec4 a_color;\r\nout vec4 v_color;\r\n\r\nvoid main() {\r\n\r\nvec3 t1 = a_vertex_low - u_eyepos_low;\r\nvec3 e = t1 - a_vertex_low;\r\nvec3 t2 = ((-u_eyepos_low - e) + (a_vertex_low - (t1 - e))) + a_vertex - u_eyepos;\r\nvec3 high_delta = t1 + t2;\r\nvec3 low_delta = t2 - (high_delta - t1);\r\nvec3 p = high_delta + low_delta;\r\ngl_Position = u_matrix * vec4(p, 1.0);\r\ngl_PointSize =  a_pointSize;\r\n// pass the color to the fragment shader\r\nv_color = a_color;\r\n}`\r\n\r\nexport let fshader300 = \r\n`#version 300 es\r\n#ifdef GL_ES\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float; // highp is supported. floats have high precision\r\n#else\r\nprecision mediump float; // highp is not supported. floats have medium precision\r\n#endif\r\n#endif \r\n//precision highp float;\r\nin vec4 v_color;\r\nout vec4 frag_color;\r\n\r\nvoid main() {\r\nfloat border = 0.05;\r\nfloat radius = 0.5;\r\nvec2 m = gl_PointCoord.xy - vec2(0.5, 0.5);\r\nfloat dist = radius - sqrt(m.x * m.x + m.y * m.y);\r\n//vec4 color1 = vec4(v_color[0], v_color[1], v_color[2], v_color[3]);\r\nfloat t = 0.0;\r\nif (dist > border)\r\n    t = 1.0;\r\n    else if (dist > 0.0)\r\n    t = dist / border;\r\n    frag_color = mix(vec4(0), v_color, t);\r\n}`;\r\n\r\nexport let vshader = \r\n`\r\nprecision highp float;\r\nuniform mat4 u_matrix;\r\nuniform vec3 u_eyepos;\r\nuniform vec3 u_eyepos_low;\r\nattribute vec3 a_vertex;\r\nattribute vec3 a_vertex_low;\r\nattribute float a_pointSize;\r\nattribute vec4 a_color;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\nvec3 t1 = a_vertex_low - u_eyepos_low;\r\nvec3 e = t1 - a_vertex_low;\r\nvec3 t2 = ((-u_eyepos_low - e) + (a_vertex_low - (t1 - e))) + a_vertex - u_eyepos;\r\nvec3 high_delta = t1 + t2;\r\nvec3 low_delta = t2 - (high_delta - t1);\r\nvec3 p = high_delta + low_delta;\r\ngl_Position = u_matrix * vec4(p, 1.0);\r\ngl_PointSize =  a_pointSize;\r\n// pass the color to the fragment shader\r\nv_color = a_color;\r\n}`\r\n\r\nexport let fshader = \r\n`\r\n#ifdef GL_ES\r\n#ifdef GL_FRAGMENT_PRECISION_HIGH\r\nprecision highp float; // highp is supported. floats have high precision\r\n#else\r\nprecision mediump float; // highp is not supported. floats have medium precision\r\n#endif\r\n#endif \r\n//precision mediump float;\r\nvarying vec4 v_color;\r\n\r\nvoid main() {\r\nfloat border = 0.05;\r\nfloat radius = 0.5;\r\nvec2 m = gl_PointCoord.xy - vec2(0.5, 0.5);\r\nfloat dist = radius - sqrt(m.x * m.x + m.y * m.y);\r\n//vec4 color1 = vec4(v_color[0], v_color[1], v_color[2], v_color[3]);\r\nfloat t = 0.0;\r\nif (dist > border)\r\n    t = 1.0;\r\n    else if (dist > 0.0)\r\n    t = dist / border;\r\n    gl_FragColor = mix(vec4(0), v_color, t);\r\n}`;\r\n\r\nexport let fshaderSquare = \r\n`precision mediump float;\r\nvarying vec4 v_color;\r\nvoid main() {\r\ngl_FragColor = v_color;  \r\n}`;","S:\\website\\photoviewer\\client\\src\\components\\searchBar.js",["122"],"\r\n// import React, { useRef, useEffect } from 'react';\r\n// import {InputGroup, FormControl, Button}  from 'react-bootstrap';\r\n\r\n// const SearchBar = (props, ref) => {\r\n\r\n//     useEffect(() => {\r\n//         console.log(ref);\r\n//       });\r\n    \r\n//     return (\r\n//         <div>\r\n//             <InputGroup \r\n//             className=\"search\">\r\n//             <FormControl \r\n//                 className=\"search\"\r\n//                 id=\"search\"\r\n//                 placeholder=\"Search\"\r\n//                 onChange={(e) => this.changeSearch(e)}\r\n//             />\r\n//             <InputGroup.Append>\r\n//                 <Button className=\"searchButton\" variant=\"light\">\r\n//                 <img \r\n//                     className=\"searchicon\" \r\n//                     src=\"search.png\" \r\n//                     alt=\"magnifying glass\" \r\n//                     width=\"24\" \r\n//                     height=\"24\"\r\n//                     onClick={(e) => this.clickSearch(e)}>\r\n//                 </img>\r\n//                 </Button>\r\n//             </InputGroup.Append>\r\n//             </InputGroup>\r\n//         </div>)\r\n//     };\r\n// export {SearchBar};\r\n",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":143,"column":17,"nodeType":"129","messageId":"130","endLine":143,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":174,"column":17,"nodeType":"129","messageId":"130","endLine":174,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":203,"column":17,"nodeType":"129","messageId":"130","endLine":203,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":299,"column":13,"nodeType":"129","messageId":"130","endLine":299,"endColumn":16},{"ruleId":"131","severity":1,"message":"132","line":300,"column":13,"nodeType":"129","messageId":"133","endLine":300,"endColumn":23},{"ruleId":"127","severity":1,"message":"128","line":339,"column":13,"nodeType":"129","messageId":"130","endLine":339,"endColumn":16},{"ruleId":"131","severity":1,"message":"134","line":340,"column":13,"nodeType":"129","messageId":"133","endLine":340,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":370,"column":13,"nodeType":"129","messageId":"130","endLine":370,"endColumn":16},{"ruleId":"127","severity":1,"message":"135","line":371,"column":13,"nodeType":"129","messageId":"130","endLine":371,"endColumn":20},{"ruleId":"131","severity":1,"message":"136","line":371,"column":13,"nodeType":"129","messageId":"133","endLine":371,"endColumn":20},{"ruleId":"127","severity":1,"message":"128","line":399,"column":13,"nodeType":"129","messageId":"130","endLine":399,"endColumn":16},{"ruleId":"127","severity":1,"message":"137","line":400,"column":17,"nodeType":"129","messageId":"130","endLine":400,"endColumn":24},{"ruleId":"131","severity":1,"message":"138","line":400,"column":17,"nodeType":"129","messageId":"133","endLine":400,"endColumn":24},{"ruleId":"131","severity":1,"message":"139","line":4,"column":45,"nodeType":"129","messageId":"133","endLine":4,"endColumn":55},{"ruleId":"131","severity":1,"message":"140","line":4,"column":57,"nodeType":"129","messageId":"133","endLine":4,"endColumn":68},{"ruleId":"131","severity":1,"message":"141","line":4,"column":107,"nodeType":"129","messageId":"133","endLine":4,"endColumn":124},{"ruleId":"131","severity":1,"message":"142","line":4,"column":126,"nodeType":"129","messageId":"133","endLine":4,"endColumn":138},{"ruleId":"131","severity":1,"message":"143","line":21,"column":9,"nodeType":"129","messageId":"133","endLine":21,"endColumn":18},{"ruleId":"131","severity":1,"message":"144","line":1,"column":10,"nodeType":"129","messageId":"133","endLine":1,"endColumn":29},{"ruleId":"131","severity":1,"message":"145","line":8,"column":7,"nodeType":"129","messageId":"133","endLine":8,"endColumn":12},{"ruleId":"146","severity":1,"message":"147","line":44,"column":46,"nodeType":"148","messageId":"149","endLine":44,"endColumn":47},{"ruleId":"146","severity":1,"message":"147","line":44,"column":127,"nodeType":"148","messageId":"149","endLine":44,"endColumn":128},{"ruleId":"131","severity":1,"message":"150","line":3,"column":7,"nodeType":"129","messageId":"133","endLine":3,"endColumn":20},{"ruleId":"151","severity":1,"message":"152","line":21,"column":9,"nodeType":"153","messageId":"154","endLine":21,"endColumn":73},{"ruleId":"131","severity":1,"message":"155","line":2,"column":17,"nodeType":"129","messageId":"133","endLine":2,"endColumn":23},"no-native-reassign",["156"],"no-negated-in-lhs",["157"],"no-redeclare","'ctx' is already defined.","Identifier","redeclared","no-unused-vars","'colorTable' is assigned a value but never used.","unusedVar","'g1Chart' is assigned a value but never used.","'g2Chart' is already defined.","'g2Chart' is assigned a value but never used.","'g3Chart' is already defined.","'g3Chart' is assigned a value but never used.","'InputGroup' is defined but never used.","'FormControl' is defined but never used.","'ToggleButtonGroup' is defined but never used.","'ToggleButton' is defined but never used.","'SearchBar' is defined but never used.","'FieldBinaryOutlined' is defined but never used.","'ALPHA' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'EARTH_EQUATOR' is assigned a value but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'useRef' is defined but never used.","no-global-assign","no-unsafe-negation"]