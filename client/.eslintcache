[{"S:\\website\\photoviewer\\client\\src\\index.js":"1","S:\\website\\photoviewer\\client\\src\\Main.js":"2","S:\\website\\photoviewer\\client\\src\\serviceWorker.js":"3","S:\\website\\photoviewer\\client\\src\\Report.js":"4","S:\\website\\photoviewer\\client\\src\\App.js":"5","S:\\website\\photoviewer\\client\\src\\CustomNav.js":"6","S:\\website\\photoviewer\\client\\src\\DynamicDropdown.js":"7","S:\\website\\photoviewer\\client\\src\\PhotoModal.js":"8","S:\\website\\photoviewer\\client\\src\\CustomModal.js":"9","S:\\website\\photoviewer\\client\\src\\ArchivePhotoModal.js":"10","S:\\website\\photoviewer\\client\\src\\VideoCard.js":"11","S:\\website\\photoviewer\\client\\src\\util.js":"12","S:\\website\\photoviewer\\client\\src\\ToolsMenu.js":"13","S:\\website\\photoviewer\\client\\src\\PositionControl.js":"14","S:\\website\\photoviewer\\client\\src\\L.CanvasOverlay.js":"15","S:\\website\\photoviewer\\client\\src\\MediaPlayerControl.js":"16","S:\\website\\photoviewer\\client\\src\\Drawer.js":"17"},{"size":603,"mtime":1601929236389,"results":"18","hashOfConfig":"19"},{"size":512,"mtime":1601929236337,"results":"20","hashOfConfig":"19"},{"size":5086,"mtime":1589839304022,"results":"21","hashOfConfig":"19"},{"size":18140,"mtime":1611276860708,"results":"22","hashOfConfig":"19"},{"size":107287,"mtime":1611710896897,"results":"23","hashOfConfig":"19"},{"size":1267,"mtime":1601929236331,"results":"24","hashOfConfig":"19"},{"size":1243,"mtime":1591046122069,"results":"25","hashOfConfig":"19"},{"size":10386,"mtime":1605486409407,"results":"26","hashOfConfig":"19"},{"size":20944,"mtime":1601929236295,"results":"27","hashOfConfig":"19"},{"size":5731,"mtime":1606267300960,"results":"28","hashOfConfig":"19"},{"size":8651,"mtime":1611696234020,"results":"29","hashOfConfig":"19"},{"size":3573,"mtime":1607026261602,"results":"30","hashOfConfig":"19"},{"size":1157,"mtime":1611691845441,"results":"31","hashOfConfig":"19"},{"size":600,"mtime":1589839303659,"results":"32","hashOfConfig":"19"},{"size":4744,"mtime":1589839303637,"results":"33","hashOfConfig":"19"},{"size":604,"mtime":1607034864202,"results":"34","hashOfConfig":"19"},{"size":2950,"mtime":1611712027570,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"eiup9r",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"38"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"S:\\website\\photoviewer\\client\\src\\index.js",[],["72","73"],"S:\\website\\photoviewer\\client\\src\\Main.js",[],"S:\\website\\photoviewer\\client\\src\\serviceWorker.js",[],"S:\\website\\photoviewer\\client\\src\\Report.js",["74","75","76","77","78","79","80","81","82","83","84","85","86"],"import React from 'react';\r\nimport './Report.css';\r\nimport './CustomNav.js';\r\nimport { Link } from \"react-router-dom\";\r\nimport {Navbar, Nav}  from 'react-bootstrap';\r\nimport CustomNav from './CustomNav.js';\r\nimport Chart from 'chart.js';\r\n\r\nconst NO_COLORS = 9;\r\n\r\nclass Report extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: props.location.project.surface,\r\n        }\r\n        \r\n    }\r\n\r\n    addMap(map, data) {\r\n        if (map.has(data)) {\r\n            let n = map.get(data);\r\n            n = n + 1;\r\n            map.set(data, n); \r\n        } else {\r\n            if (data !== 0) {\r\n                map.set(data, 1); \r\n            }   \r\n        }\r\n        return map;\r\n    }\r\n\r\n    buildColorTable(count) {\r\n        let arr = [];\r\n        for(let i = 0; i < count; i++) {\r\n            arr.push(this.colorMap[i]);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    clickChart(e) {\r\n        console.log(this.gradeChart.getElementsAtEvent(e));\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.colorMap = [\r\n            \"#FFC857\", \"#058ED9\", \"#BDD9BF\", \"#E8F086\", \"#6FDE6E\", \"#FF4242\", \"#A691AE\", \"#235FA4\", \"#0A284B\", \"#848FA2\"\r\n        ];\r\n        \r\n        if(this.state.mode === \"footpath\") {\r\n            this.gradeMap = new Map();\r\n            this.faultMap = new Map();\r\n            this.causeMap = new Map();\r\n            this.surfaceMap = new Map();\r\n            this.data.forEach(item => {\r\n                this.faultMap = this.addMap(this.faultMap, item.fault);\r\n                this.causeMap = this.addMap(this.causeMap, item.cause);\r\n                this.surfaceMap = this.addMap(this.surfaceMap, item.fpsurface);\r\n                this.gradeMap = this.addMap(this.gradeMap, item.grade);\r\n            });\r\n\r\n            let gradeData = Array.from(this.gradeMap, ([name, value]) => ({ name, value }));\r\n            //let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n            let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n            let causeData = Array.from(this.causeMap, ([name, value]) => ({ name, value }));\r\n            let surfaceData = Array.from(this.surfaceMap, ([name, value]) => ({ name, value }));\r\n            gradeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            //faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            causeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            surfaceData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            let faultTop = faultData.slice(0, NO_COLORS);\r\n            let faultBottom = faultData.slice(NO_COLORS, faultData.length);\r\n            let causeTop = causeData.slice(0, NO_COLORS);\r\n            let causeBottom = causeData.slice( NO_COLORS, causeData.length);\r\n            let surfaceTop = surfaceData.slice(0, NO_COLORS);\r\n            let surfaceBottom = surfaceData.slice(NO_COLORS, surfaceData.length);\r\n            let value1 = 0;\r\n            let value2 = 0;\r\n            let value3 = 0;\r\n            faultBottom.forEach(item => {\r\n                value1 += item.value;\r\n            });\r\n            causeBottom.forEach(item => {\r\n                value2 += item.value;\r\n            });\r\n            surfaceBottom.forEach(item => {\r\n                value3 += item.value;\r\n            });\r\n            let others1 = {name: \"Others\", value: value1};\r\n            let others2 = {name: \"Others\", value: value2};\r\n            let others3 = {name: \"Others\", value: value3};\r\n            faultTop.push(others1);\r\n            causeTop.push(others2);\r\n            surfaceTop.push(others3);\r\n           \r\n            var ctx = document.getElementById('myChart').getContext(\"2d\");\r\n            this.gradeChart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: gradeData.map((gradeData) => gradeData.name + \": \" + gradeData.value),\r\n                    datasets: [{\r\n                        data: gradeData.map((gradeData) => gradeData.value),\r\n                        backgroundColor: [\r\n                            'rgba(0, 204, 0, 1)',\r\n                            'rgba(255, 128, 0, 1)',\r\n                            'rgba(255, 0, 255, 1)',\r\n                            'rgba(0, 0, 255, 1)',\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(0, 204, 0, 1)',\r\n                            'rgba(255, 128, 0, 1)',\r\n                            'rgba(255, 0, 255, 1)',\r\n                            'rgba(0, 0, 255, 1)',    \r\n                        ],\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    onClick: (e) => {\r\n                        this.clickChart(e);\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        position: 'top',\r\n                        text: 'Grade',\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        fullWidth: false,\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade1\").getContext('2d');\r\n            this.g1Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: faultTop.map((faultTop) => faultTop.name + \": \" + faultTop.value),\r\n                    datasets: [{\r\n                        data: faultTop.map((faultTop) => faultTop.value),\r\n                        backgroundColor: this.buildColorTable(faultTop.length),\r\n                        borderColor: this.buildColorTable(faultTop.length),\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    title: {\r\n                        display: true,\r\n                        position: 'top',\r\n                        text: 'Fault Type',\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        fullWidth: false,\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade2\").getContext('2d');\r\n            var g2Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n            data: {\r\n                labels: causeTop.map((causeTop) => causeTop.name + \": \" + causeTop.value),\r\n                datasets: [{\r\n                    data: causeTop.map((causeTop) => causeTop.value),\r\n                    backgroundColor: this.buildColorTable(causeTop.length),\r\n                    borderColor: this.buildColorTable(causeTop.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Cause',\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade3\").getContext('2d');\r\n                var g3Chart = new Chart(ctx, {\r\n                    type: 'doughnut',\r\n                data: {\r\n                    labels: surfaceTop.map((surfaceTop) => surfaceTop.name + \": \" + surfaceTop.value),\r\n                    datasets: [{\r\n                        data: surfaceTop.map((surfaceTop) => surfaceTop.value),\r\n                        backgroundColor: this.buildColorTable(surfaceTop.length),\r\n                        borderColor: this.buildColorTable(surfaceTop.length),\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Surface',\r\n                        padding: 5,\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n                });\r\n            \r\n        } else {\r\n            this.gradeMap = new Map();\r\n            this.g1Map = new Map();\r\n            this.g2Map = new Map();\r\n            this.g3Map = new Map();\r\n            this.data.forEach(item => {\r\n                if (item.priority !== 0 ) {\r\n                    if (item.priority === 99) {\r\n                        item.priority = \"Signage\";\r\n                    } else {\r\n                        item.priority = \"Priority: \" + item.priority;\r\n                    }\r\n                }\r\n                switch(item.priority) {\r\n                    case  \"Priority: 1\":\r\n                        this.g1Map = this.addMap(this.g1Map, item.fault);\r\n                        break;\r\n                    case  \"Priority: 2\":\r\n                        this.g2Map = this.addMap(this.g2Map, item.fault);\r\n                        break;\r\n                    case  \"Priority: 3\":\r\n                        this.g3Map = this.addMap(this.g3Map, item.fault);\r\n                        break;\r\n                    default:\r\n                        break;\r\n\r\n                }\r\n                this.gradeMap = this.addMap(this.gradeMap, item.priority);\r\n                //this.faultMap = this.addMap(this.faultMap, item.class);\r\n            });\r\n\r\n            let gradeData = Array.from(this.gradeMap, ([name, value]) => ({ name, value }));\r\n        //let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n        let g1Data = Array.from(this.g1Map, ([name, value]) => ({ name, value }));\r\n        let g2Data = Array.from(this.g2Map, ([name, value]) => ({ name, value }));\r\n        let g3Data = Array.from(this.g3Map, ([name, value]) => ({ name, value }));\r\n        gradeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        //faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g1Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g2Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g3Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        let g1Top = g1Data.slice(0, NO_COLORS);\r\n        let g1Bottom = g1Data.slice(NO_COLORS, g1Data.length);\r\n        let g2Top = g2Data.slice(0, NO_COLORS);\r\n        let g2Bottom = g2Data.slice(NO_COLORS, g2Data.length);\r\n        let g3Top = g3Data.slice(0, NO_COLORS);\r\n        let g3Bottom = g3Data.slice(NO_COLORS, g3Data.length);\r\n        let value1 = 0;\r\n        let value2 = 0;\r\n        let value3 = 0;\r\n        g1Bottom.forEach(item => {\r\n            value1 += item.value;\r\n        });\r\n        g2Bottom.forEach(item => {\r\n            value2 += item.value;\r\n        });\r\n        g3Bottom.forEach(item => {\r\n            value3 += item.value;\r\n        });\r\n        let others1 = {name: \"Others\", value: value1};\r\n        let others2 = {name: \"Others\", value: value2};\r\n        let others3 = {name: \"Others\", value: value3};\r\n        g1Top.push(others1);\r\n        g2Top.push(others2);\r\n        g3Top.push(others3);\r\n       \r\n        var ctx = document.getElementById('myChart').getContext(\"2d\");\r\n        let colorTable = this.buildColorTable(g1Top.length);\r\n        this.gradeChart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: gradeData.map((gradeData) => gradeData.name + \": \" + gradeData.value),\r\n                datasets: [{\r\n                    data: gradeData.map((gradeData) => gradeData.value),\r\n                    backgroundColor: [\r\n                        'rgba(0, 204, 0, 1)',\r\n                        'rgba(255, 128, 0, 1)',\r\n                        'rgba(255, 0, 255, 1)',\r\n                        'rgba(0, 0, 255, 1)',\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(0, 204, 0, 1)',\r\n                        'rgba(255, 128, 0, 1)',\r\n                        'rgba(255, 0, 255, 1)',\r\n                        'rgba(0, 0, 255, 1)',    \r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                onClick: (e) => {\r\n                    this.clickChart(e);\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade1\").getContext('2d');\r\n        var g1Chart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: g1Top.map((g1Top) => g1Top.name + \": \" + g1Top.value),\r\n                datasets: [{\r\n                    data: g1Top.map((g1Top) => g1Top.value),\r\n                    backgroundColor: this.buildColorTable(g1Top.length),\r\n                    borderColor: this.buildColorTable(g1Top.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    position: 'top',\r\n                    text: 'Priority 1',\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    fullWidth: false,\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade2\").getContext('2d');\r\n        var g2Chart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n        data: {\r\n            labels: g2Top.map((g2Top) => g2Top.name + \": \" + g2Top.value),\r\n            datasets: [{\r\n                data: g2Top.map((g2Top) => g2Top.value),\r\n                backgroundColor: this.buildColorTable(g2Top.length),\r\n                borderColor: this.buildColorTable(g2Top.length),\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            title: {\r\n                display: true,\r\n                text: 'Priority 2',\r\n            },\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            legend: {\r\n                position: 'right',\r\n                labels: {\r\n                    padding: 10,\r\n                    boxWidth: 12\r\n                }\r\n            }\r\n        }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade3\").getContext('2d');\r\n            var g3Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n            data: {\r\n                labels: g3Top.map((g3Top) => g3Top.name + \": \" + g3Top.value),\r\n                datasets: [{\r\n                    data: g3Top.map((g3Top) => g3Top.value),\r\n                    backgroundColor: this.buildColorTable(g3Top.length),\r\n                    borderColor: this.buildColorTable(g3Top.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Priority 3',\r\n                    padding: 5,\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n            });\r\n           \r\n        }\r\n            \r\n            \r\n        \r\n    }\r\n    render() {\r\n        const { login } = this.props.location\r\n        const { user } = this.props.location\r\n        const { data } = this.props.location\r\n        this.user = user;\r\n        this.login = login;\r\n        this.data = data;\r\n        \r\n    return (\r\n        <div> \r\n            <Navbar bg=\"light\" expand=\"lg\"> \r\n        \r\n          <Navbar.Brand href=\"#home\">\r\n          <img\r\n              src=\"logo.png\"\r\n              width=\"122\"\r\n              height=\"58\"\r\n              className=\"d-inline-block align-top\"\r\n              alt=\"logo\"\r\n            />\r\n          </Navbar.Brand>\r\n          <Nav> \r\n            <Link className=\"dropdownlink\" to={'/'} style={{ textDecoration: 'none' }}>Home</Link>\r\n            </Nav>\r\n            <CustomNav title={this.user}></CustomNav>\r\n            </Navbar>\r\n            \r\n            <div className=\"chartParent\">\r\n            <div className = \"gradediv\">\r\n                    <canvas className=\"gradeChart\" id=\"myChart\"></canvas>  \r\n                </div>\r\n                <div className = \"g1div\">\r\n                    <canvas className=\"g1Chart\" id=\"grade1\"></canvas>  \r\n                </div>\r\n                <div className = \"g2div\">\r\n                    <canvas className=\"g2Chart\" id=\"grade2\"></canvas>  \r\n                </div>\r\n                <div className = \"g3div\">\r\n                    <canvas className=\"g3Chart\" id=\"grade3\"></canvas>  \r\n                </div>\r\n                \r\n            </div>    \r\n      </div> \r\n    );\r\n    }\r\n}\r\nexport default Report;\r\n  \r\n","S:\\website\\photoviewer\\client\\src\\App.js",["87","88"],"S:\\website\\photoviewer\\client\\src\\CustomNav.js",[],"S:\\website\\photoviewer\\client\\src\\DynamicDropdown.js",[],"S:\\website\\photoviewer\\client\\src\\PhotoModal.js",[],"S:\\website\\photoviewer\\client\\src\\CustomModal.js",[],"S:\\website\\photoviewer\\client\\src\\ArchivePhotoModal.js",[],"S:\\website\\photoviewer\\client\\src\\VideoCard.js",[],"S:\\website\\photoviewer\\client\\src\\util.js",[],"S:\\website\\photoviewer\\client\\src\\ToolsMenu.js",[],"S:\\website\\photoviewer\\client\\src\\PositionControl.js",[],"S:\\website\\photoviewer\\client\\src\\L.CanvasOverlay.js",[],"S:\\website\\photoviewer\\client\\src\\MediaPlayerControl.js",[],"S:\\website\\photoviewer\\client\\src\\Drawer.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":143,"column":17,"nodeType":"95","messageId":"96","endLine":143,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":174,"column":17,"nodeType":"95","messageId":"96","endLine":174,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":203,"column":17,"nodeType":"95","messageId":"96","endLine":203,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":299,"column":13,"nodeType":"95","messageId":"96","endLine":299,"endColumn":16},{"ruleId":"97","severity":1,"message":"98","line":300,"column":13,"nodeType":"95","messageId":"99","endLine":300,"endColumn":23},{"ruleId":"93","severity":1,"message":"94","line":339,"column":13,"nodeType":"95","messageId":"96","endLine":339,"endColumn":16},{"ruleId":"97","severity":1,"message":"100","line":340,"column":13,"nodeType":"95","messageId":"99","endLine":340,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":370,"column":13,"nodeType":"95","messageId":"96","endLine":370,"endColumn":16},{"ruleId":"93","severity":1,"message":"101","line":371,"column":13,"nodeType":"95","messageId":"96","endLine":371,"endColumn":20},{"ruleId":"97","severity":1,"message":"102","line":371,"column":13,"nodeType":"95","messageId":"99","endLine":371,"endColumn":20},{"ruleId":"93","severity":1,"message":"94","line":399,"column":13,"nodeType":"95","messageId":"96","endLine":399,"endColumn":16},{"ruleId":"93","severity":1,"message":"103","line":400,"column":17,"nodeType":"95","messageId":"96","endLine":400,"endColumn":24},{"ruleId":"97","severity":1,"message":"104","line":400,"column":17,"nodeType":"95","messageId":"99","endLine":400,"endColumn":24},{"ruleId":"97","severity":1,"message":"105","line":4,"column":107,"nodeType":"95","messageId":"99","endLine":4,"endColumn":124},{"ruleId":"97","severity":1,"message":"106","line":4,"column":126,"nodeType":"95","messageId":"99","endLine":4,"endColumn":138},"no-native-reassign",["107"],"no-negated-in-lhs",["108"],"no-redeclare","'ctx' is already defined.","Identifier","redeclared","no-unused-vars","'colorTable' is assigned a value but never used.","unusedVar","'g1Chart' is assigned a value but never used.","'g2Chart' is already defined.","'g2Chart' is assigned a value but never used.","'g3Chart' is already defined.","'g3Chart' is assigned a value but never used.","'ToggleButtonGroup' is defined but never used.","'ToggleButton' is defined but never used.","no-global-assign","no-unsafe-negation"]