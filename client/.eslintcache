[{"S:\\website\\photoviewer\\client\\src\\index.js":"1","S:\\website\\photoviewer\\client\\src\\Main.js":"2","S:\\website\\photoviewer\\client\\src\\serviceWorker.js":"3","S:\\website\\photoviewer\\client\\src\\Data.js":"4","S:\\website\\photoviewer\\client\\src\\Report.js":"5","S:\\website\\photoviewer\\client\\src\\App.js":"6","S:\\website\\photoviewer\\client\\src\\CustomNav.js":"7","S:\\website\\photoviewer\\client\\src\\Drawer.js":"8","S:\\website\\photoviewer\\client\\src\\VideoCard.js":"9","S:\\website\\photoviewer\\client\\src\\CustomModal.js":"10","S:\\website\\photoviewer\\client\\src\\util.js":"11","S:\\website\\photoviewer\\client\\src\\PhotoModal.js":"12","S:\\website\\photoviewer\\client\\src\\ArchivePhotoModal.js":"13","S:\\website\\photoviewer\\client\\src\\components\\SearchBar.jsx":"14","S:\\website\\photoviewer\\client\\src\\GLEngine.js":"15","S:\\website\\photoviewer\\client\\src\\components\\CustomSVG.js":"16","S:\\website\\photoviewer\\client\\src\\DynamicDropdown.js":"17","S:\\website\\photoviewer\\client\\src\\PositionControl.js":"18","S:\\website\\photoviewer\\client\\src\\L.CanvasOverlay.js":"19","S:\\website\\photoviewer\\client\\src\\MediaPlayerControl.js":"20","S:\\website\\photoviewer\\client\\src\\components\\FilterButton.js":"21","S:\\website\\photoviewer\\client\\src\\shaders.js":"22","S:\\website\\photoviewer\\client\\src\\Vector2D.js":"23","S:\\website\\photoviewer\\client\\src\\components\\Fetcher.js":"24","S:\\website\\photoviewer\\client\\src\\components\\Roadlines.js":"25"},{"size":601,"mtime":1626736176413,"results":"26","hashOfConfig":"27"},{"size":609,"mtime":1626735889421,"results":"28","hashOfConfig":"27"},{"size":5086,"mtime":1589839304022,"results":"29","hashOfConfig":"27"},{"size":2275,"mtime":1626736407588,"results":"30","hashOfConfig":"27"},{"size":18191,"mtime":1626736346690,"results":"31","hashOfConfig":"27"},{"size":91711,"mtime":1627946466881,"results":"32","hashOfConfig":"27"},{"size":1267,"mtime":1601929236331,"results":"33","hashOfConfig":"27"},{"size":2820,"mtime":1611868991748,"results":"34","hashOfConfig":"27"},{"size":10067,"mtime":1615161894723,"results":"35","hashOfConfig":"27"},{"size":20944,"mtime":1601929236295,"results":"36","hashOfConfig":"27"},{"size":4458,"mtime":1627941081383,"results":"37","hashOfConfig":"27"},{"size":7091,"mtime":1626724563499,"results":"38","hashOfConfig":"27"},{"size":5731,"mtime":1606267300960,"results":"39","hashOfConfig":"27"},{"size":2761,"mtime":1627334195201,"results":"40","hashOfConfig":"27"},{"size":27385,"mtime":1627941081366,"results":"41","hashOfConfig":"27"},{"size":5005,"mtime":1626736613810,"results":"42","hashOfConfig":"27"},{"size":1320,"mtime":1627334202901,"results":"43","hashOfConfig":"27"},{"size":600,"mtime":1589839303659,"results":"44","hashOfConfig":"27"},{"size":4786,"mtime":1624926015963,"results":"45","hashOfConfig":"27"},{"size":604,"mtime":1607034864202,"results":"46","hashOfConfig":"27"},{"size":478,"mtime":1626736266855,"results":"47","hashOfConfig":"27"},{"size":7953,"mtime":1627344180644,"results":"48","hashOfConfig":"27"},{"size":2821,"mtime":1625171497131,"results":"49","hashOfConfig":"27"},{"size":581,"mtime":1627941081370,"results":"50","hashOfConfig":"27"},{"size":6143,"mtime":1627945587296,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1ps959",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"S:\\website\\photoviewer\\client\\src\\index.js",[],["105","106"],"S:\\website\\photoviewer\\client\\src\\Main.js",[],"S:\\website\\photoviewer\\client\\src\\serviceWorker.js",[],"S:\\website\\photoviewer\\client\\src\\Data.js",[],"S:\\website\\photoviewer\\client\\src\\Report.js",["107","108","109","110","111","112","113","114","115","116","117","118","119"],"import React from 'react';\r\nimport './Report.css';\r\nimport './CustomNav.js';\r\nimport { Link } from \"react-router-dom\";\r\nimport {Navbar, Nav}  from 'react-bootstrap';\r\nimport CustomNav from './CustomNav.js';\r\nimport Chart from 'chart.js';\r\n\r\nconst NO_COLORS = 9;\r\n\r\nclass Report extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            mode: props.location.project.surface,\r\n        }\r\n        \r\n    }\r\n\r\n    addMap(map, data) {\r\n        if (map.has(data)) {\r\n            let n = map.get(data);\r\n            n = n + 1;\r\n            map.set(data, n); \r\n        } else {\r\n            if (data !== 0) {\r\n                map.set(data, 1); \r\n            }   \r\n        }\r\n        return map;\r\n    }\r\n\r\n    buildColorTable(count) {\r\n        let arr = [];\r\n        for(let i = 0; i < count; i++) {\r\n            arr.push(this.colorMap[i]);\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    clickChart(e) {\r\n        console.log(this.gradeChart.getElementsAtEvent(e));\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.colorMap = [\r\n            \"#FFC857\", \"#058ED9\", \"#BDD9BF\", \"#E8F086\", \"#6FDE6E\", \"#FF4242\", \"#A691AE\", \"#235FA4\", \"#0A284B\", \"#848FA2\"\r\n        ];\r\n        \r\n        if(this.state.mode === \"footpath\") {\r\n            this.gradeMap = new Map();\r\n            this.faultMap = new Map();\r\n            this.causeMap = new Map();\r\n            this.surfaceMap = new Map();\r\n            this.data.forEach(item => {\r\n                this.faultMap = this.addMap(this.faultMap, item.fault);\r\n                this.causeMap = this.addMap(this.causeMap, item.cause);\r\n                this.surfaceMap = this.addMap(this.surfaceMap, item.fpsurface);\r\n                this.gradeMap = this.addMap(this.gradeMap, item.grade);\r\n            });\r\n\r\n            let gradeData = Array.from(this.gradeMap, ([name, value]) => ({ name, value }));\r\n            //let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n            let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n            let causeData = Array.from(this.causeMap, ([name, value]) => ({ name, value }));\r\n            let surfaceData = Array.from(this.surfaceMap, ([name, value]) => ({ name, value }));\r\n            gradeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            //faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            causeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            surfaceData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n            let faultTop = faultData.slice(0, NO_COLORS);\r\n            let faultBottom = faultData.slice(NO_COLORS, faultData.length);\r\n            let causeTop = causeData.slice(0, NO_COLORS);\r\n            let causeBottom = causeData.slice( NO_COLORS, causeData.length);\r\n            let surfaceTop = surfaceData.slice(0, NO_COLORS);\r\n            let surfaceBottom = surfaceData.slice(NO_COLORS, surfaceData.length);\r\n            let value1 = 0;\r\n            let value2 = 0;\r\n            let value3 = 0;\r\n            faultBottom.forEach(item => {\r\n                value1 += item.value;\r\n            });\r\n            causeBottom.forEach(item => {\r\n                value2 += item.value;\r\n            });\r\n            surfaceBottom.forEach(item => {\r\n                value3 += item.value;\r\n            });\r\n            let others1 = {name: \"Others\", value: value1};\r\n            let others2 = {name: \"Others\", value: value2};\r\n            let others3 = {name: \"Others\", value: value3};\r\n            faultTop.push(others1);\r\n            causeTop.push(others2);\r\n            surfaceTop.push(others3);\r\n           \r\n            var ctx = document.getElementById('myChart').getContext(\"2d\");\r\n            this.gradeChart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: gradeData.map((gradeData) => gradeData.name + \": \" + gradeData.value),\r\n                    datasets: [{\r\n                        data: gradeData.map((gradeData) => gradeData.value),\r\n                        backgroundColor: [\r\n                            'rgba(0, 204, 0, 1)',\r\n                            'rgba(255, 128, 0, 1)',\r\n                            'rgba(255, 0, 255, 1)',\r\n                            'rgba(0, 0, 255, 1)',\r\n                        ],\r\n                        borderColor: [\r\n                            'rgba(0, 204, 0, 1)',\r\n                            'rgba(255, 128, 0, 1)',\r\n                            'rgba(255, 0, 255, 1)',\r\n                            'rgba(0, 0, 255, 1)',    \r\n                        ],\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    onClick: (e) => {\r\n                        this.clickChart(e);\r\n                    },\r\n                    title: {\r\n                        display: true,\r\n                        position: 'top',\r\n                        text: 'Grade',\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        fullWidth: false,\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade1\").getContext('2d');\r\n            this.g1Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n                data: {\r\n                    labels: faultTop.map((faultTop) => faultTop.name + \": \" + faultTop.value),\r\n                    datasets: [{\r\n                        data: faultTop.map((faultTop) => faultTop.value),\r\n                        backgroundColor: this.buildColorTable(faultTop.length),\r\n                        borderColor: this.buildColorTable(faultTop.length),\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    title: {\r\n                        display: true,\r\n                        position: 'top',\r\n                        text: 'Fault Type',\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        fullWidth: false,\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade2\").getContext('2d');\r\n            var g2Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n            data: {\r\n                labels: causeTop.map((causeTop) => causeTop.name + \": \" + causeTop.value),\r\n                datasets: [{\r\n                    data: causeTop.map((causeTop) => causeTop.value),\r\n                    backgroundColor: this.buildColorTable(causeTop.length),\r\n                    borderColor: this.buildColorTable(causeTop.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Cause',\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n            });\r\n    \r\n            var ctx = document.getElementById(\"grade3\").getContext('2d');\r\n                var g3Chart = new Chart(ctx, {\r\n                    type: 'doughnut',\r\n                data: {\r\n                    labels: surfaceTop.map((surfaceTop) => surfaceTop.name + \": \" + surfaceTop.value),\r\n                    datasets: [{\r\n                        data: surfaceTop.map((surfaceTop) => surfaceTop.value),\r\n                        backgroundColor: this.buildColorTable(surfaceTop.length),\r\n                        borderColor: this.buildColorTable(surfaceTop.length),\r\n                        borderWidth: 1\r\n                    }]\r\n                },\r\n                options: {\r\n                    title: {\r\n                        display: true,\r\n                        text: 'Surface',\r\n                        padding: 5,\r\n                    },\r\n                    maintainAspectRatio: false,\r\n                    responsive: true,\r\n                    legend: {\r\n                        position: 'right',\r\n                        labels: {\r\n                            padding: 10,\r\n                            boxWidth: 12\r\n                        }\r\n                    }\r\n                }\r\n                });\r\n            \r\n        } else {\r\n            this.gradeMap = new Map();\r\n            this.g1Map = new Map();\r\n            this.g2Map = new Map();\r\n            this.g3Map = new Map();\r\n            this.data.forEach(item => {\r\n                if (item.priority !== 0 ) {\r\n                    if (item.priority === 99) {\r\n                        item.priority = \"Signage\";\r\n                    } else {\r\n                        item.priority = \"Priority: \" + item.priority;\r\n                    }\r\n                }\r\n                switch(item.priority) {\r\n                    case  \"Priority: 1\":\r\n                        this.g1Map = this.addMap(this.g1Map, item.fault);\r\n                        break;\r\n                    case  \"Priority: 2\":\r\n                        this.g2Map = this.addMap(this.g2Map, item.fault);\r\n                        break;\r\n                    case  \"Priority: 3\":\r\n                        this.g3Map = this.addMap(this.g3Map, item.fault);\r\n                        break;\r\n                    default:\r\n                        break;\r\n\r\n                }\r\n                this.gradeMap = this.addMap(this.gradeMap, item.priority);\r\n                //this.faultMap = this.addMap(this.faultMap, item.class);\r\n            });\r\n\r\n            let gradeData = Array.from(this.gradeMap, ([name, value]) => ({ name, value }));\r\n        //let faultData = Array.from(this.faultMap, ([name, value]) => ({ name, value }));\r\n        let g1Data = Array.from(this.g1Map, ([name, value]) => ({ name, value }));\r\n        let g2Data = Array.from(this.g2Map, ([name, value]) => ({ name, value }));\r\n        let g3Data = Array.from(this.g3Map, ([name, value]) => ({ name, value }));\r\n        gradeData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        //faultData.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g1Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g2Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        g3Data.sort((a, b) => (a.value < b.value) ? 1 : -1);\r\n        let g1Top = g1Data.slice(0, NO_COLORS);\r\n        let g1Bottom = g1Data.slice(NO_COLORS, g1Data.length);\r\n        let g2Top = g2Data.slice(0, NO_COLORS);\r\n        let g2Bottom = g2Data.slice(NO_COLORS, g2Data.length);\r\n        let g3Top = g3Data.slice(0, NO_COLORS);\r\n        let g3Bottom = g3Data.slice(NO_COLORS, g3Data.length);\r\n        let value1 = 0;\r\n        let value2 = 0;\r\n        let value3 = 0;\r\n        g1Bottom.forEach(item => {\r\n            value1 += item.value;\r\n        });\r\n        g2Bottom.forEach(item => {\r\n            value2 += item.value;\r\n        });\r\n        g3Bottom.forEach(item => {\r\n            value3 += item.value;\r\n        });\r\n        let others1 = {name: \"Others\", value: value1};\r\n        let others2 = {name: \"Others\", value: value2};\r\n        let others3 = {name: \"Others\", value: value3};\r\n        g1Top.push(others1);\r\n        g2Top.push(others2);\r\n        g3Top.push(others3);\r\n       \r\n        var ctx = document.getElementById('myChart').getContext(\"2d\");\r\n        let colorTable = this.buildColorTable(g1Top.length);\r\n        this.gradeChart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: gradeData.map((gradeData) => gradeData.name + \": \" + gradeData.value),\r\n                datasets: [{\r\n                    data: gradeData.map((gradeData) => gradeData.value),\r\n                    backgroundColor: [\r\n                        'rgba(0, 204, 0, 1)',\r\n                        'rgba(255, 128, 0, 1)',\r\n                        'rgba(255, 0, 255, 1)',\r\n                        'rgba(0, 0, 255, 1)',\r\n                    ],\r\n                    borderColor: [\r\n                        'rgba(0, 204, 0, 1)',\r\n                        'rgba(255, 128, 0, 1)',\r\n                        'rgba(255, 0, 255, 1)',\r\n                        'rgba(0, 0, 255, 1)',    \r\n                    ],\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                onClick: (e) => {\r\n                    this.clickChart(e);\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade1\").getContext('2d');\r\n        var g1Chart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n            data: {\r\n                labels: g1Top.map((g1Top) => g1Top.name + \": \" + g1Top.value),\r\n                datasets: [{\r\n                    data: g1Top.map((g1Top) => g1Top.value),\r\n                    backgroundColor: this.buildColorTable(g1Top.length),\r\n                    borderColor: this.buildColorTable(g1Top.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    position: 'top',\r\n                    text: 'Priority 1',\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    fullWidth: false,\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade2\").getContext('2d');\r\n        var g2Chart = new Chart(ctx, {\r\n            type: 'doughnut',\r\n        data: {\r\n            labels: g2Top.map((g2Top) => g2Top.name + \": \" + g2Top.value),\r\n            datasets: [{\r\n                data: g2Top.map((g2Top) => g2Top.value),\r\n                backgroundColor: this.buildColorTable(g2Top.length),\r\n                borderColor: this.buildColorTable(g2Top.length),\r\n                borderWidth: 1\r\n            }]\r\n        },\r\n        options: {\r\n            title: {\r\n                display: true,\r\n                text: 'Priority 2',\r\n            },\r\n            maintainAspectRatio: false,\r\n            responsive: true,\r\n            legend: {\r\n                position: 'right',\r\n                labels: {\r\n                    padding: 10,\r\n                    boxWidth: 12\r\n                }\r\n            }\r\n        }\r\n        });\r\n\r\n        var ctx = document.getElementById(\"grade3\").getContext('2d');\r\n            var g3Chart = new Chart(ctx, {\r\n                type: 'doughnut',\r\n            data: {\r\n                labels: g3Top.map((g3Top) => g3Top.name + \": \" + g3Top.value),\r\n                datasets: [{\r\n                    data: g3Top.map((g3Top) => g3Top.value),\r\n                    backgroundColor: this.buildColorTable(g3Top.length),\r\n                    borderColor: this.buildColorTable(g3Top.length),\r\n                    borderWidth: 1\r\n                }]\r\n            },\r\n            options: {\r\n                title: {\r\n                    display: true,\r\n                    text: 'Priority 3',\r\n                    padding: 5,\r\n                },\r\n                maintainAspectRatio: false,\r\n                responsive: true,\r\n                legend: {\r\n                    position: 'right',\r\n                    labels: {\r\n                        padding: 10,\r\n                        boxWidth: 12\r\n                    }\r\n                }\r\n            }\r\n            });\r\n           \r\n        }\r\n    \r\n    }\r\n    render() {\r\n        const { login } = this.props.location\r\n        const { user } = this.props.location\r\n        const { data } = this.props.location\r\n        this.user = user;\r\n        this.login = login;\r\n        this.data = data;\r\n        \r\n    return (\r\n        <div> \r\n            <Navbar bg=\"light\" expand=\"lg\">  \r\n                <Navbar.Brand href=\"#home\">\r\n                    <img\r\n                    src=\"logo.png\"\r\n                    width=\"122\"\r\n                    height=\"58\"\r\n                    className=\"d-inline-block align-top\"\r\n                    alt=\"logo\"\r\n                    />\r\n                </Navbar.Brand>\r\n                <Nav> \r\n                    <Link className=\"dropdownlink\" to={'/'} style={{ textDecoration: 'none' }}>Home</Link>\r\n                </Nav>\r\n                <CustomNav \r\n                    title={this.user}>\r\n                </CustomNav>\r\n            </Navbar>\r\n            <div className=\"chartParent\">\r\n                <div className = \"gradediv\">\r\n                    <canvas className=\"gradeChart\" id=\"myChart\"></canvas>  \r\n                </div>\r\n                <div className = \"g1div\">\r\n                    <canvas className=\"g1Chart\" id=\"grade1\"></canvas>  \r\n                </div>\r\n                <div className = \"g2div\">\r\n                    <canvas className=\"g2Chart\" id=\"grade2\"></canvas>  \r\n                </div>\r\n                <div className = \"g3div\">\r\n                    <canvas className=\"g3Chart\" id=\"grade3\"></canvas>  \r\n                </div>    \r\n            </div>    \r\n      </div> \r\n    );\r\n    }\r\n}\r\nexport default Report;","S:\\website\\photoviewer\\client\\src\\App.js",["120","121"],"import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Map as LMap, TileLayer, Popup, ScaleControl, LayerGroup, Marker, Polyline}  from 'react-leaflet';\r\nimport {Navbar, Nav, NavDropdown, Dropdown, Modal, Button, Image, Form, Spinner, Toast}  from 'react-bootstrap';\r\nimport L from 'leaflet';\r\nimport './App.css';\r\nimport './ToolsMenu.css';\r\nimport CustomNav from './CustomNav.js';\r\nimport './L.CanvasOverlay';\r\nimport GLEngine from './GLEngine.js';\r\nimport './PositionControl';\r\nimport './MediaPlayerControl';\r\nimport AntDrawer from './Drawer.js';\r\nimport DynamicDropdown from './DynamicDropdown.js';\r\nimport CustomModal from './CustomModal.js';\r\nimport PhotoModal from './PhotoModal.js';\r\nimport VideoCard from './VideoCard.js';\r\nimport ArchivePhotoModal from './ArchivePhotoModal.js';\r\nimport {pad, formatDate, calcGCDistance} from  './util.js';\r\nimport SearchBar from './components/SearchBar.jsx'\r\nimport {CustomSVG} from './components/CustomSVG.js'\r\nimport { Fragment } from 'react';\r\nimport {FilterButton} from './components/FilterButton';\r\nimport Roadlines from './components/Roadlines';\r\nimport {Fetcher} from './components/Fetcher';\r\nimport { notification } from 'antd';\r\n\r\n\r\n\r\nconst DIST_TOLERANCE = 20; //metres \r\n\r\nconst DefaultIcon = L.icon({\r\n  iconUrl: './OpenCamera20px.png',\r\n  iconSize: [16, 16],\r\n  iconAnchor: [8, 8]\r\n}); \r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.customNav = React.createRef();\r\n    this.menu = React.createRef();\r\n    this.customModal = React.createRef();\r\n    this.search = React.createRef();\r\n    this.photoModal = React.createRef();\r\n    this.archivePhotoModal = React.createRef();\r\n    this.videoModal = React.createRef();\r\n    this.videoCard = React.createRef();\r\n    this.toolsRef = React.createRef();\r\n    this.antdrawer = React.createRef();\r\n    this.searchRef = React.createRef();\r\n    this.applyRef = React.createRef();\r\n    this.roadLinesRef = React.createRef();\r\n    this.notificationRef = React.createRef();\r\n    this.glpoints = null;\r\n    this.vidPolyline = null;\r\n    \r\n    this.state = JSON.parse(window.sessionStorage.getItem('state')) || {\r\n      location: {\r\n        lat: -41.2728,\r\n        lng: 173.2995,\r\n      },\r\n      admin : false,\r\n      ruler: false,\r\n      rulerOrigin: null,\r\n      rulerPolyline: null,\r\n      rulerDistance: 0,\r\n      filter: [], //filter for db request\r\n      priorityDropdown: null,\r\n      priorityMode: \"Priority\", //whether we use priority or grade\r\n      reverse: false,\r\n      priorities: [], \r\n      ages: [],\r\n      filterDropdowns: [],\r\n      filterPriorities: [],\r\n      filterAges: [],\r\n      host: null,\r\n      token: null,\r\n      login: null,\r\n      zIndex: 900,\r\n      key: process.env.REACT_APP_MAPBOX,\r\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\r\n      osmThumbnail: \"satellite64.png\",\r\n      attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> contributors',\r\n      mode: \"map\",\r\n      zoom: 8,\r\n      index: null,\r\n      centreData: [],\r\n      fault: [],\r\n      priority: [],\r\n      sizes: [],\r\n      photos: [],\r\n      currentFault: [],\r\n      archiveMarker: [],\r\n      carMarker: [], //position of current image in video\r\n      layers: [],\r\n      show: false,\r\n      showVideo: false,\r\n      showRuler: false,\r\n      showLogin: false,\r\n      showContact: false,\r\n      showTerms: false,\r\n      showAbout: false,\r\n      showAdmin: false,\r\n      modalPhoto: null,\r\n      popover: false,\r\n      photourl: null,\r\n      amazon: null,\r\n     \r\n      password: null,\r\n      projects: null, //all foootpath and road projects for the user\r\n      faultClass: [],\r\n      activeProject: null,\r\n      activeLayers: [], //layers displayed on the\r\n      activeLayer: null, //the layer in focus\r\n      bucket: null,\r\n      clearDisabled: true,\r\n      message: \"\",\r\n      lineData: null,\r\n      mouse: null,\r\n      coordinates: null, //coordinates of clicked marker\r\n      glPoints: null,\r\n      glLines: null,\r\n      selectedIndex: null,\r\n      mouseclick: null,\r\n      objGLData: [],\r\n      selectedGeometry: [],\r\n      selectedCarriage: [],\r\n      photoArray: null,\r\n      selectedStatus: null,\r\n      projectMode: null, //the type of project being displayed footpath or road     \r\n      newUser: null,\r\n      newPassword: null,\r\n      search: null,\r\n      district: null,\r\n      spinner: false,\r\n      isArchive: false, //true when doing full photo search\r\n      isVideo: false, //true when doing full photo search\r\n      hasVideo: false,\r\n      toolsRadio: null,\r\n      activeCarriage: null, //carriageway user has clicked on - leaflet polyline\r\n      erp: true,\r\n      notificationKey: null,\r\n    };   \r\n  }\r\n\r\n  componentDidMount() {\r\n    let host = this.getHost();\r\n    let user = this.getUser();\r\n    let projects = this.getProjects();\r\n    let token = window.sessionStorage.getItem('token')\r\n    this.setState({\r\n      host: host,\r\n      token: token,\r\n      login: user,\r\n      projects: projects\r\n    }, () => {\r\n      if (this.state.login === \"Login\") {\r\n        this.callBackendAPI()\r\n        .catch(err => alert(err));\r\n      }\r\n      this.customNav.current.setTitle(user);\r\n      this.customNav.current.setOnClick(this.getLoginModal(user));\r\n    });\r\n    this.leafletMap = this.map.leafletElement;\r\n    this.initializeGL();\r\n    this.addEventListeners(); \r\n    this.customModal.current.delegate(this);\r\n    //this.photoModal.current.delegate(this);\r\n    this.searchRef.current.setDelegate(this);\r\n    this.archivePhotoModal.current.delegate(this);\r\n    \r\n    this.roadLinesRef.current.setDelegate(this.GLEngine);\r\n    this.rulerPolyline = null;\r\n    this.distance = 0;\r\n    this.position = L.positionControl();\r\n    this.leafletMap.addControl(this.position);\r\n    this.geojsonLayer = L.geoJSON().addTo(this.leafletMap);\r\n    this.imageoverlay = L.imageOverlay\r\n    L.Marker.prototype.options.icon = DefaultIcon;\r\n    if(this.state.objGLData.length !== 0) {\r\n      this.filterLayer(this.state.activeProject, true);\r\n    } \r\n  }\r\n\r\n  componentDidUpdate() {  \r\n    if (this.state.erp)\r\n    this.roadLinesRef.current.setProject(\r\n      {\r\n        layer: this.state.activeLayer,\r\n        host: this.state.host,\r\n        login: this.state.login,\r\n        token: this.state.token,\r\n      });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.sessionStorage.setItem('state', JSON.stringify(this.state));\r\n    this.removeEventListeners(); \r\n  }\r\n\r\n  initializeGL() {\r\n    this.GLEngine = new GLEngine(this.leafletMap); \r\n    this.GLEngine.setAppDelegate(this);\r\n  }\r\n\r\n  centreMap = (latlngs) => {\r\n    if (latlngs.length !== 0) {\r\n        let bounds = L.latLngBounds(latlngs);\r\n        this.leafletMap.fitBounds(bounds);\r\n    } else {\r\n        return;\r\n    }\r\n    let textbox = document.getElementById(\"search\");\r\n    if (this.state.search !== null) {\r\n        textbox.value = \"\";\r\n        this.setState({search: null});\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * \r\n   * @param {int - calculates the index from r,g,b color} color \r\n   */\r\n  getIndex(color) { \r\n    console.log(color)\r\n    return color[0] + color[1] * 256 + color[2] * 256 * 256 + color[3] * 256 * 256 * 256;\r\n  }\r\n\r\n  /**\r\n   * Called from drawing callback in L.CanvasOverlay by delegate\r\n   * Sets the selected point and redraw\r\n   * @param {the point the user selected} index \r\n   */\r\n  setIndex(index) {\r\n    if (index !== 0) {\r\n      this.setState({selectedIndex: index});\r\n      this.setState({selectedGeometry: [this.state.objGLData[index - 1]]}); \r\n      let bucket = this.getGLFault(index - 1, 'inspection');\r\n      if (this.state.projectMode === \"road\") {\r\n        if (bucket !== null) {\r\n          let suffix= this.state.amazon.substring(this.state.amazon.length - 8,  this.state.amazon.length - 1);\r\n          if (suffix !== bucket) {\r\n            let prefix = this.state.amazon.substring(0, this.state.amazon.length - 8);\r\n            console.log(prefix + bucket + \"/\")\r\n            this.setState({amazon: prefix + bucket + \"/\"});\r\n          }\r\n        }\r\n      } else {\r\n      }    \r\n    } else {//user selected screen only - no marker\r\n      this.setState({selectedIndex: null});\r\n      this.setState({selectedGeometry: []});\r\n    }\r\n    this.GLEngine.redraw(this.GLEngine.glData, false);\r\n  }\r\n\r\n /**\r\n * Loops through json objects and extracts fault information\r\n * Builds object containing fault information and calls redraw\r\n * @param {JSON array of fault objects received from db} data \r\n * @param {String type of data ie. road or footpath} type\r\n *  @param {Boolean zoom to extents when data loads} zoom\r\n */\r\n  addGLGeometry(points, lines, type, zoom) {\r\n    this.minMaxLine = this.GLEngine.minMaxLineSize();\r\n    this.minMaxPoint = this.GLEngine.minMaxPointSize();\r\n    const priorities = this.setPriorityObject();\r\n    let options = {type: type, priorities: priorities, count: 0};\r\n    let buffer = [];\r\n    let glLines = this.GLEngine.loadLines(buffer, lines, options);\r\n    options = {type: type, priorities: priorities, count: glLines.count};\r\n    buffer = [];\r\n    let glPoints = this.GLEngine.loadPoints(buffer, points, options); \r\n    \r\n    let glData = {centre: [], points: glPoints.vertices, lines: glLines.vertices}\r\n    if (zoom) {\r\n      this.GLEngine.redraw(glData, true);\r\n    } else {\r\n      this.GLEngine.redraw(glData, false);\r\n    }\r\n    let faults = glLines.faults.concat(glPoints.faults);\r\n    this.setState({objGLData: faults});\r\n    this.setState({amazon: this.state.activeLayer.amazon});\r\n    this.setState({spinner: false});\r\n  }\r\n\r\n  \r\n\r\n  setPriorityObject() {\r\n    let obj = {}\r\n    if (this.state.reverse) {\r\n      obj.high = 5;\r\n      obj.med = 4;\r\n      obj.low = 3;\r\n    } else {\r\n      obj.high = 1;\r\n      obj.med = 2;\r\n      obj.low = 3;\r\n    }\r\n    return obj;\r\n  }\r\n\r\n  /**\r\n   * adds various event listeners to the canvas\r\n   */\r\n  addEventListeners() {\r\n    this.leafletMap.addEventListener('click', (event) => {\r\n      this.clickLeafletMap(event);\r\n    })\r\n    // this.leafletMap.addEventListener('dblclick', (event) => {\r\n    //   this.dblClickLeafletMap(event);\r\n    // });\r\n    this.leafletMap.addEventListener('mousemove', (event) => {\r\n      this.onMouseMove(event);\r\n    });\r\n    this.leafletMap.addEventListener('keydown', (event) => {\r\n      this.onKeyPress(event.originalEvent);\r\n    });\r\n  }\r\n\r\n  \r\n  /**\r\n     * adds various event listeners to the canvas\r\n     */\r\n  removeEventListeners() {\r\n    this.leafletMap.removeEventListener('click', (event) => {\r\n      this.clickLeafletMap(event);\r\n    })\r\n    // this.leafletMap.addEventListener('dblclick', (event) => {\r\n    //   this.dblClickLeafletMap(event);\r\n    // });\r\n    this.leafletMap.removeEventListener('mousemove', (event) => {\r\n      this.onMouseMove(event);\r\n    });\r\n    this.leafletMap.removeEventListener('keydown', (event) => {\r\n      this.onKeyPress(event.originalEvent);\r\n    });\r\n  }\r\n\r\n  getPhotoBounds() {\r\n    let mapBounds = this.leafletMap.getBounds();\r\n    let southeast = mapBounds.getSouthEast();\r\n    let center = this.leafletMap.getCenter();\r\n    return L.latLngBounds(center, southeast);\r\n  }\r\n\r\n  /**\r\n   * Handles click events on lealfet map\r\n   * @param {event - the mouse event} e \r\n   */\r\n  clickLeafletMap = async (e) => {\r\n    let mode = this.antdrawer.current.getMode();\r\n    switch(mode) {\r\n      case 'Video':\r\n        if(this.vidPolyline === null) {  \r\n          this.vidPolyline = this.getCarriage(e, calcGCDistance, this.getPhotos); \r\n          this.vidPolyline.then((line) => {\r\n            this.setState({activeCarriage: line})\r\n          });\r\n        } else {\r\n          this.vidPolyline.then((line) => {\r\n            if (line === null) {\r\n              this.vidPolyline = null;\r\n              this.setState({activeCarriage: null});\r\n            } else {\r\n              if(line.options.color === \"blue\") {\r\n                line.remove();\r\n                this.vidPolyline = null;\r\n                this.setState({activeCarriage: null})\r\n                this.setState({carMarker: []});\r\n              }\r\n            }           \r\n          });\r\n        }      \r\n        break;\r\n      case 'Street':\r\n        this.getArhivePhoto(e);\r\n        break;\r\n      case 'Ruler':\r\n        let polyline = this.state.rulerPolyline;\r\n      if (polyline === null) {\r\n        let points = [];\r\n        points.push(e.latlng);\r\n        polyline = new L.polyline(points, {\r\n          color: 'blue',\r\n          weight: 4,\r\n          opacity: 0.5 \r\n          });\r\n        polyline.addTo(this.leafletMap);\r\n        this.setState({rulerPolyline: polyline});\r\n      } else {\r\n        let points = polyline.getLatLngs();\r\n        points.push(e.latlng);\r\n        polyline.setLatLngs(points);\r\n      }\r\n        break;\r\n      case 'Map':\r\n      if (!this.state.activeLayer) return;\r\n      if (this.state.erp) {\r\n        const login = {\r\n          user: this.state.login, \r\n          project: this.state.activeLayer.code,\r\n          token: this.state.token,\r\n\r\n        }\r\n        let address = this.state.host + \"/carriageway\";\r\n        let query = {\r\n          lat: e.latlng.lat,\r\n          lng: e.latlng.lng\r\n        }\r\n        let response = await Fetcher(address, login, query);\r\n        let geometry = JSON.parse(response.data.geojson);\r\n        let erp = {\r\n          start: response.data.starterp,\r\n          end: response.data.enderp\r\n        }\r\n        if (response.data.dist < 0.00003) { //distance tolerance\r\n          let dist = this.roadLinesRef.current.erp(geometry, erp, e.latlng);\r\n          if (this.state.notificationKey) {\r\n            if (response.data.carriageid !== this.state.notificationKey.carriage) \r\n            notification.close(this.state.notificationKey.id);\r\n          }\r\n          let distance = dist.toFixed(); //string\r\n          notification.open({\r\n            className: \"notification\",\r\n            key: response.data.id,\r\n            message: <div><b>{response.data.roadname}</b><br></br><b>{\"ERP \" + distance + \" m\"}</b></div>,\r\n            description: \r\n              <div><b>Road ID: {response.data.roadid}<br></br></b>\r\n                <b>Carriage ID: {response.data.carriageid + '\\n'}<br></br></b>\r\n                <b>Start: {response.data.starterp + ' m' + '\\t'}</b>\r\n                <b>End: {response.data.enderp + ' m'}<br></br></b>\r\n                <b>Width: {response.data.width + ' m'}<br></br></b>\r\n                <b><br></br></b>\r\n              </div>,\r\n            placement: 'bottomRight',\r\n            duration: 10,\r\n            onClose: () => {this.setState({notificationKey: null})},\r\n          });\r\n          let key = {id: response.data.id, carriage: response.data.carriageid}\r\n          this.setState({notificationKey: key});\r\n        }     \r\n      }\r\n      if (this.state.glpoints !== null) {\r\n        if (this.state.selectedCarriage !== null) {\r\n        }\r\n        this.setState({selectedIndex: null});\r\n        this.setState({selectedGeometry: []});\r\n        this.GLEngine.mouseClick = e;\r\n        if (this.state.activeLayer) {\r\n          this.GLEngine.redraw(this.GLEngine.glData, false);\r\n        }      \r\n      }\r\n\r\n\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  onMouseMove(e) {\r\n    let lat = Math.round(e.latlng.lat * 100000) / 100000;\r\n    let lng = Math.round(e.latlng.lng * 100000) / 100000;\r\n    this.position.updateHTML(lat, lng);\r\n    if (this.state.toolsRadio === 'ruler') {\r\n      let polyline = this.state.rulerPolyline\r\n      if (polyline !== null) {\r\n        let points = polyline.getLatLngs();\r\n        \r\n        if (points.length === 1) {\r\n          points.push(e.latlng);\r\n          polyline.setLatLngs(points);\r\n          this.calculateDistance(points);\r\n        } else {\r\n          points[points.length - 1] = e.latlng;\r\n          polyline.setLatLngs(points);\r\n          this.calculateDistance(points);\r\n        }\r\n      }   \r\n    }\r\n  }\r\n  \r\n  onKeyPress(e) {\r\n    if (e.key === \"x\" || e.key === \"X\") {\r\n      this.setState({ruler: false});\r\n      let polyline = this.state.rulerPolyline;\r\n      if (polyline !== null) {\r\n        let points = polyline.getLatLngs();\r\n        //console.log(points);\r\n        points.pop();\r\n        //console.log(points);\r\n        polyline.setLatLngs(points);\r\n        this.calculateDistance(points);\r\n      }\r\n    } else if (e.key === \"Delete\") {\r\n      let polyline = this.state.rulerPolyline;\r\n      if (polyline !== null) {\r\n        let points = polyline.getLatLngs();\r\n        if (points.length > 2) {\r\n          points.splice(points.length - 2, 1);\r\n        }\r\n        polyline.setLatLngs(points);\r\n      }\r\n    } else if (e.key === \"Escape\") {\r\n      let polyline = this.state.rulerPolyline;\r\n      if (polyline !== null) {\r\n        polyline.removeFrom(this.leafletMap);\r\n        this.setState({rulerPolyline: null});\r\n        this.setState({rulerDistance: 0});\r\n      }   \r\n    } else {\r\n      //console.log(e.key);\r\n    }\r\n  }\r\n\r\n  calculateDistance(points) {\r\n    const R = 6371 * 1000; // metres\r\n    let metres = 0;\r\n    for (let i = 0; i < points.length - 1; i++) {\r\n      let lat1 = points[i].lat * Math.PI/180; //in radians\r\n      let lat2 = points[i + 1].lat * Math.PI/180;\r\n      let lng1 = points[i].lng * Math.PI/180; //in radians\r\n      let lng2 = points[i + 1].lng * Math.PI/180;\r\n      let deltaLat = (lat2-lat1);\r\n      let deltaLng = (lng2-lng1);\r\n      let a = Math.sin(deltaLat/2) * Math.sin(deltaLat/2) +\r\n              Math.cos(lat1) * Math.cos(lat2) *\r\n              Math.sin(deltaLng/2) * Math.sin(deltaLng/2);\r\n      let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n      let d = R * c; // in metres\r\n      metres += d;\r\n    }\r\n    let total = Number((metres).toFixed(0));\r\n    this.setState({rulerDistance: total});\r\n  }\r\n\r\n  getDistance() {\r\n    return this.distance\r\n  }\r\n\r\n  callBackendAPI = async () => {\r\n    const response = await fetch(\"https://\" + this.state.host + '/api'); \r\n    const body = await response.json();\r\n    if (response.status !== 200) {\r\n      alert(body);   \r\n      throw Error(body.message) \r\n    } else {\r\n        this.buildProjects(body.projects);  \r\n      }\r\n    return body; \r\n  };\r\n\r\n  /**\r\n   * Gets the development or production host \r\n   * @return {string} the host name\r\n   */\r\n  getHost() {\r\n    if (process.env.NODE_ENV === \"development\") {\r\n      return \"localhost:8443\";\r\n    } else if (process.env.NODE_ENV === \"production\") {\r\n      return \"osmium.nz\";\r\n    } else {\r\n      return \"localhost:8443\";\r\n    }\r\n   }\r\n\r\n  getProjects() {\r\n    let project = window.sessionStorage.getItem('projects');\r\n    if (!project) {\r\n      return [];\r\n    } else {\r\n      return JSON.parse(project);\r\n    }    \r\n  }\r\n  /**\r\n   * Checks if user has cookie. If not not logged in.\r\n   * Returns username in cookie if found else 'Login'\r\n   */\r\n  getUser() {\r\n    let user = window.sessionStorage.getItem('user');\r\n    if (!user) {\r\n      return \"Login\";\r\n    } else {\r\n      return user;\r\n    }    \r\n  }\r\n\r\n  getLoginModal(user) {\r\n    if (user === \"Login\") {\r\n      return (e) => this.clickLogin(e);\r\n    } else {\r\n      return (e) => this.logout(e);\r\n    }\r\n  }\r\n  /**\r\n   * Called when data layer is loaded\r\n   * @param {array of late lngs} latlngs \r\n   */\r\n  centreMap(latlngs) {\r\n      if (latlngs.length !== 0) {\r\n        let bounds = L.latLngBounds(latlngs);\r\n        const map = this.leaflet;\r\n        map.fitBounds(bounds);\r\n      } else {\r\n        return;\r\n      }\r\n      let textbox = document.getElementById(\"search\");\r\n      if (this.state.search !== null) {\r\n        textbox.value = \"\";\r\n        this.setState({search: null});\r\n      }\r\n  }\r\n\r\n  \r\n  /**\r\n   * toogles between satellite and map view by swapping z-index\r\n   * @param {the control} e \r\n   */\r\n  toogleMap(e) {\r\n    if (this.state.login === \"Login\") {\r\n      return;\r\n    }\r\n    if (this.state.mode === \"map\") {\r\n      this.setState({zIndex: 1000});\r\n      this.setState({mode: \"sat\"});\r\n      this.setState({osmThumbnail: \"map64.png\"});\r\n      //this.setState({url: \"https://api.mapbox.com/v4/mapbox.terrain-rgb/{z}/{x}/{y}.pngraw?access_token=\" + this.state.key});\r\n      this.setState({url: \"https://api.mapbox.com/styles/v1/mapbox/satellite-streets-v11/tiles/{z}/{x}/{y}?access_token=\" + this.state.key});\r\n      this.setState({attribution: \r\n        \"&copy;<a href=https://www.mapbox.com/about/maps target=_blank>MapBox</a>&copy;<a href=https://www.openstreetmap.org/copyright target=_blank>OpenStreetMap</a> contributors\"})\r\n    } else {\r\n      this.setState({zIndex: 900});\r\n      this.setState({mode: \"map\"});\r\n      this.setState({osmThumbnail: \"satellite64.png\"});\r\n      this.setState({url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"});\r\n      this.setState({attribution: '&copy; <a href=\"https://www.openstreetmap.org/copyright target=_blank>OpenStreetMap</a> contributors'})\r\n    }\r\n  }\r\n\r\n  closePopup(e) {\r\n    if (!this.state.show) {\r\n      this.setState({selectedGeometry: []});\r\n      this.setIndex(0); //simulate user click black screen\r\n    } \r\n  }\r\n\r\n  /**\r\n   * Fired when user clciks photo on thumbnail\r\n   * @param {event} e \r\n   */\r\n  clickImage(e) {   \r\n    //let photo = this.getGLFault(this.state.selectedIndex - 1, 'photo');\r\n    this.photoModal.current.showModal(true, this.state.selectedGeometry, this.state.amazon);\r\n  }\r\n\r\n  getPhoto(direction) {\r\n    let photo = this.state.currentPhoto;\r\n    let intSuffix = (parseInt(photo.slice(photo.length - 5, photo.length)));\r\n    let n = null;\r\n    if (direction === \"prev\") {\r\n      n = intSuffix - 1;\r\n    } else {\r\n      n = intSuffix + 1;\r\n    }\r\n    let newSuffix = pad(n, 5);\r\n    let prefix = photo.slice(0, photo.length - 5);\r\n    let newPhoto = prefix + newSuffix;\r\n    this.setState({currentPhoto: newPhoto});\r\n    return newPhoto;\r\n  }\r\n\r\n  \r\n  /**\r\n   * resets to null state when user logouts\r\n   */\r\n  reset() {\r\n    window.sessionStorage.removeItem(\"token\");\r\n    window.sessionStorage.removeItem(\"user\");\r\n    window.sessionStorage.removeItem(\"project\");\r\n    window.sessionStorage.removeItem(\"state\");\r\n    window.sessionStorage.removeItem(\"centrelines\");\r\n    this.customNav.current.setOnClick((e) => this.clickLogin(e));\r\n    this.customNav.current.setTitle(\"Login\");\r\n    this.setState({\r\n      activeProject: null,\r\n      projects: [],\r\n      login: \"Login\",\r\n      priorites: [],\r\n      objGLData: [],\r\n      glpoints: [],\r\n      activeLayers: [],\r\n      activeLayer: null,\r\n      filterDropdowns: [],\r\n      ages: [],\r\n      rulerPoints: [],\r\n      filter: [], //filter for db request\r\n      priorityDropdown: null, \r\n      filterPriorities: [],\r\n      filterAges: [],\r\n    }, function() {\r\n      let glData = {centre: [], points: [], lines: []}\r\n      this.GLEngine.redraw(glData, false);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * loops through project array received from db and sets\r\n   * project array in the state. Sets project cookie\r\n   * @param {Array} projects \r\n   */\r\n  buildProjects(projects) {    \r\n    let obj = {road : [], footpath: []}\r\n    for(var i = 0; i < projects.length; i += 1) {\r\n      if (projects[i].surface === \"road\") {\r\n        obj.road.push(projects[i]);\r\n      } else {\r\n        obj.footpath.push(projects[i]);\r\n      }\r\n    }\r\n    window.sessionStorage.setItem('projects', JSON.stringify(obj));\r\n    this.setState({projects: obj});\r\n  }\r\n\r\n  /**\r\n   * Get closest polyline to click and plots on map \r\n   * Starts movie of carriagway\r\n   * @param {event} e \r\n   * @param {callback to calculate distance} distFunc \r\n   * @param {callback (this.getphotos) to get closest polyline to click} photoFunc \r\n   */\r\n  async getCarriage(e, distFunc, photoFunc) {\r\n    const response = await fetch(\"https://\" + this.state.host + '/carriage', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: this.state.activeLayer,\r\n        lat: e.latlng.lat,\r\n        lng: e.latlng.lng\r\n      })\r\n    });\r\n    let vidPolyline = null;\r\n    const body = await response.json();\r\n    //console.log(body);\r\n    if (body.error == null) {\r\n      let geojson = JSON.parse(body.data.geojson);\r\n      let dist = distFunc(body.data.dist);\r\n      if (dist < 40) {\r\n        let latlngs = geojson.coordinates;\r\n        let coords = [];\r\n        latlngs.forEach( (coord) => {\r\n          let latlng = [coord[1], coord[0]];\r\n          coords.push(latlng);\r\n        });\r\n      \r\n        vidPolyline = L.polyline(coords, {\r\n          roadid: body.data.roadid,\r\n          carriageid: body.data.id,\r\n          direction: body.data.direction,\r\n          label: body.data.label,\r\n          color: 'blue',\r\n          weight: 4,\r\n          opacity: 0.5,\r\n          host: this.state.host,\r\n          login: {login: this.state.login, project: this.state.activeLayer, token: this.state.token}\r\n        }).addTo(this.leafletMap);\r\n        let parent = this;\r\n        vidPolyline.on('click', function (e) {\r\n          if (parent.state.video) {\r\n            let host = vidPolyline.options.host;\r\n            let login = vidPolyline.options.login;\r\n            let side = parent.videoCard.current.getSide();\r\n            let photo = parent.getVideoPhoto(e.latlng, host, login, side);\r\n            photo.then((data) => {\r\n              parent.videoCard.current.search(data.data.photo);\r\n            });\r\n          } else {\r\n            this.setStyle({\r\n              color: 'red',\r\n              weight: 4\r\n            });\r\n            let carriage = vidPolyline.options.carriageid;\r\n            let host = vidPolyline.options.host;\r\n            let login = vidPolyline.options.login;\r\n            let direction = vidPolyline.options.direction;\r\n            let body = null;\r\n            if (direction === 'B') {\r\n              body = photoFunc(carriage, 'L', host, login);\r\n            } else {\r\n              body = photoFunc(carriage, null, host, login);\r\n            }\r\n            parent.setState({video: true});\r\n            body.then((data) => {\r\n              let photo = null;\r\n              if (data.side === null) {\r\n                photo = parent.getVideoPhoto(e.latlng, host, login, null);\r\n              } else {\r\n                photo = parent.getVideoPhoto(e.latlng, host, login, 'L');\r\n              }\r\n                        \r\n              photo.then((initialPhoto) => {\r\n                let found = false;\r\n                if (data.data != null) {\r\n                  for (let i = 0; i < data.data.length; i++) {\r\n                    if(initialPhoto.data.photo === data.data[i].photo) {\r\n                      parent.setState({photoArray: data.data});\r\n                      parent.videoCard.current.initialise(true, parent.state.projectMode, initialPhoto.data.side, direction, parent.state.amazon, parent.state.photoArray, i);\r\n                      found = true;\r\n                      break;\r\n                    }   \r\n                  }\r\n                }\r\n                \r\n                if (!found) {\r\n                  alert(\"error loading video - Not found\")\r\n                }\r\n              });\r\n              \r\n            });\r\n          }         \r\n        });\r\n        return vidPolyline;  \r\n      } else {\r\n        return null;\r\n      }\r\n    } else {\r\n      alert(response.status + \" \" + body.error); \r\n    }   \r\n  }\r\n\r\n  /**\r\n   * Delegate function for fetching new photos if user changes side \r\n   * Updates video cards data array\r\n   * @param {the id of the carriagway} carriageid \r\n   * @param {left 'L' or right 'R' side of road} side \r\n   */\r\n  async changeSide(carriageid, erp, side) {\r\n    let body = this.changeSides(carriageid, erp, side, this.state.host, this.state.activeCarriage.options.login);\r\n    body.then((data) => {\r\n      this.setState({photoArray: data.data});\r\n      this.videoCard.current.refresh(data.data, data.newPhoto, side);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns photo name closest to user click \r\n   * @param {lat lng of user click} latlng \r\n   * @param {server} host \r\n   * @param {user login} login \r\n   */\r\n  async getVideoPhoto(latlng, host, login, side) {\r\n    const response = await fetch('https://' + host + '/archive', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json', \r\n        \"authorization\": login.token,       \r\n      },\r\n      body: JSON.stringify({\r\n        user: login.login,\r\n        project: login.project,\r\n        lat: latlng.lat,\r\n        lng: latlng.lng,\r\n        side: side\r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (response.status !== 200) {\r\n      alert(response.status + \" \" + response.statusText);  \r\n      throw Error(body.message);   \r\n    } else {\r\n      return body;\r\n    }   \r\n  }\r\n\r\n\r\n  async getPhotos(carriageid, side, host, login) {\r\n    const response = await fetch('https://' + host + '/photos', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json', \r\n        \"authorization\": login.token,       \r\n      },\r\n      body: JSON.stringify({\r\n        user: login.login,\r\n        project: login.project,\r\n        carriageid: carriageid,\r\n        side: side\r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (response.status !== 200) {\r\n      alert(response.status + \" \" + response.statusText);  \r\n      throw Error(body.message);   \r\n    } else {\r\n      return body;\r\n    }   \r\n  }\r\n\r\n  async changeSides(carriageid, erp, side, host, login) {\r\n    const response = await fetch('https://' + host + '/changeSide', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json', \r\n        \"authorization\": login.token,       \r\n      },\r\n      body: JSON.stringify({\r\n        user: login.login,\r\n        project: login.project,\r\n        carriageid: carriageid,\r\n        side: side,\r\n        erp: erp\r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (response.status !== 200) {\r\n      alert(response.status + \" \" + response.statusText);  \r\n      throw Error(body.message);   \r\n    } else {\r\n      return body;\r\n    }   \r\n  }\r\n\r\n  /**\r\n   * sends request for photo based in lat/lng of click\r\n   * @param {the click event i.e} e \r\n   */\r\n  async getArhivePhoto(e) {\r\n    //e.preventDefault();\r\n    const response = await fetch(\"https://\" + this.state.host + '/archive', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: this.state.activeLayer,\r\n        lat: e.latlng.lat,\r\n        lng: e.latlng.lng\r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (body.error == null) {\r\n      let distance = calcGCDistance(body.data.dist);\r\n      let assetID = null;\r\n      if (this.state.activeLayer.surface === \"footpath\") {\r\n        assetID = body.data.footpathid;\r\n      } else {\r\n        assetID = body.data.carriageway;\r\n      }\r\n      if (distance <= DIST_TOLERANCE) {\r\n        let obj = {type: this.state.activeLayer.surface, address: body.data.address, amazon: this.state.amazon, carriage: assetID, photo: body.data.photo, \r\n        roadid: body.data.roadid, side: body.data.side, erp: body.data.erp, lat: body.data.latitude, lng: body.data.longitude};\r\n        this.archivePhotoModal.current.setArchiveModal(true, obj);\r\n        let arr = this.state.archiveMarker;\r\n        let point = L.latLng(body.data.latitude, body.data.longitude);\r\n        arr.push(point);\r\n        this.setState({archiveMarker: arr});\r\n      }\r\n    } else {\r\n      alert(response.status + \" \" + body.error); \r\n    }   \r\n  }\r\n\r\n  /**\r\n   * sends request for photo based on\r\n   * @param {the click event i.e} e \r\n   */\r\n  async getArchiveData(photo) {\r\n    const response = await fetch(\"https://\" + this.state.host + '/archiveData', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: this.state.activeLayer,\r\n        photo: photo\r\n      })\r\n    });\r\n    const body = await response.json();\r\n    let assetID = null;\r\n    if (body.error == null) {\r\n      if (this.state.activeLayer.surface === \"footpath\") {\r\n        assetID = body.data.footpathid;\r\n      } else {\r\n        assetID = body.data.carriageway;\r\n      }\r\n    let obj = {type: this.state.activeLayer.surface, address: body.data.address, amazon: this.state.amazon, carriage: assetID, photo: body.data.photo, \r\n    roadid: body.data.roadid, side: body.data.side, erp: body.data.erp, lat: body.data.latitude, lng: body.data.longitude};\r\n    this.archivePhotoModal.current.setArchiveModal(true, obj);\r\n\r\n    //this.reverseLookup(body.data); \r\n    let arr = this.state.archiveMarker;\r\n    let point = L.latLng(body.data.latitude, body.data.longitude);\r\n    arr.push(point);\r\n    this.setState({archiveMarker: arr}); \r\n  } else {\r\n    alert(response.status + \" \" + body.error); \r\n  }\r\n}\r\n\r\n  async logout(e) {\r\n    e.preventDefault();\r\n    const response = await fetch(\"https://\" + this.state.host + '/logout', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (response.status !== 200) {\r\n      alert(response.status + \" \" + response.statusText);  \r\n      throw Error(body.message);    \r\n    } \r\n    this.reset();  \r\n  }\r\n\r\n  async login(e) {  \r\n    e.preventDefault();\r\n    const response = await fetch('https://' + this.state.host + '/login', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.userInput.value,\r\n        key: this.passwordInput.value\r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (response.status !== 200) {\r\n      alert(response.status + \" \" + response.statusText);  \r\n      throw Error(body.message);   \r\n    }  \r\n    if (body.result) {\r\n      window.sessionStorage.setItem('token', body.token);\r\n      window.sessionStorage.setItem('user', body.user);\r\n      this.setState({login: body.user});\r\n      this.setState({token: body.token}); \r\n      this.buildProjects(body.projects);   \r\n      this.customNav.current.setTitle(body.user);\r\n      this.customNav.current.setOnClick((e) => this.logout(e));\r\n      this.setState({showLogin: false});\r\n      this.setState({message: \"\"});\r\n      if(this.state.login === 'admin') {\r\n        this.setState({admin: true});\r\n      }\r\n    } else {\r\n      this.setState({message: \"Username or password is incorrect!\"});\r\n    }      \r\n  }\r\n  \r\n  async getDistrict(project) {  \r\n    await fetch('https://' + this.state.host + '/district', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: project\r\n      })\r\n      }).then(async (response) => {\r\n        if(!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          const body = await response.json(); \r\n          if (body.error != null) {\r\n            alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n            let e = document.createEvent(\"MouseEvent\");\r\n            await this.logout(e);\r\n          } else { \r\n            this.setState({district: body.district})\r\n          }     \r\n        }\r\n      }).catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      }); \r\n  }\r\n  /**\r\n   * checks if layer loaded if not adds layer to active layers\r\n   * calls fetch layer\r\n   * @param {event} e \r\n   * @param {string} type - the type of layer to load i.e. road or footpath\r\n   */\r\n  async loadLayer(e, type) { \r\n    e.persist();\r\n    this.setState({projectMode: type});\r\n    for(let i = 0; i < this.state.activeLayers.length; i ++) { //check if loaded\r\n      if (this.state.activeLayers[i].code === e.target.attributes.code.value) {  //if found\r\n        return;\r\n      }\r\n    }\r\n    let projects = null;\r\n    let project = e.target.attributes.code.value;   \r\n    let dynamicDropdowns = [];\r\n    await this.getSettings(project);\r\n    this.antdrawer.current.setVideo(this.state.hasVideo);\r\n    if (type === \"road\") {\r\n      projects = this.state.projects.road;\r\n      await this.loadFilters(project);    \r\n      for (let i = 0; i < this.state.faultClass.length; i++) {\r\n        let dropdown = new DynamicDropdown(this.state.faultClass[i].description);\r\n        dropdown.setCode(this.state.faultClass[i].code);\r\n        let result = await this.requestFaults(project, this.state.faultClass[i].code);\r\n        dropdown.setData(result);\r\n        dropdown.initialiseFilter();     \r\n        dynamicDropdowns.push(dropdown);\r\n      }\r\n      this.setState({filter: this.rebuildFilter()})\r\n      await this.getDistrict(project);\r\n    } else {\r\n      projects = this.state.projects.footpath;\r\n      this.setState({priorityMode: \"Grade\"});\r\n      let filters = [\"Asset\", \"Fault\", \"Type\", \"Cause\"];\r\n      for (let i = 0; i < filters.length; i++) {\r\n        let dropdown = new DynamicDropdown(filters[i]);\r\n        let result = await this.requestDropdown(project, filters[i]);\r\n        //console.log(result);\r\n        if (result != null) {\r\n          dropdown.setData(result);\r\n        }\r\n        dropdown.initialiseFilter();    \r\n        dynamicDropdowns.push(dropdown);\r\n      }\r\n      await this.getDistrict(project);\r\n    }\r\n    let layers = this.state.activeLayers;\r\n    for (let i = 0; i < projects.length; i++) { //find project\r\n      if (projects[i].code === e.target.attributes.code.value) {  //if found\r\n        let project = {code: projects[i].code, description: projects[i].description, amazon: projects[i].amazon, \r\n          date: projects[i].date, surface: projects[i].surface, visible: true} //build project object\r\n        this.setState({amazon: projects[i].amazon});\r\n        layers.push(project);\r\n        this.setState({activeLayer: project});\r\n        //await this.buildView(project);\r\n        break;\r\n        }\r\n    }\r\n    this.setState(() => ({\r\n      filterDropdowns: dynamicDropdowns,\r\n      activeLayers: layers,\r\n      activeProject: e.target.attributes.code.value,\r\n      bucket: this.buildBucket(project)\r\n    }), async function() { \r\n      await this.requestPriority(project);\r\n      if (type === \"road\") {\r\n        await this.requestAge(project); \r\n      }\r\n      this.filterLayer(project, true); //fetch layer\r\n      if (this.state.erp) {\r\n        this.roadLinesRef.current.loadCentrelines(project); \r\n      }\r\n      \r\n    });\r\n  }\r\n\r\n  async getSettings(project) {\r\n    const response = await fetch(\"https://\" + this.state.host + '/settings', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: project,\r\n      \r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (body.priority) {\r\n      this.setState({priorityMode: \"Priority\"});\r\n    } else {\r\n      this.setState({priorityMode: \"Grade\"});\r\n    }\r\n    if (body.reverse) {\r\n      this.setState({reverse: true});\r\n    } else {\r\n      this.setState({reverse: false});\r\n    }\r\n    if (body.video) {\r\n      this.setState({hasVideo: true});\r\n    } else {\r\n      this.setState({hasVideo: false});\r\n    }\r\n    if(body.centreline) {\r\n      this.setState({erp: true});\r\n    } else {\r\n      this.setState({erp: false});\r\n    }\r\n    if (response.status !== 200) {\r\n      alert(response.status + \" \" + response.statusText);  \r\n      throw Error(body.message);    \r\n    } \r\n  }\r\n\r\n  async buildView(project) {\r\n    const response = await fetch(\"https://\" + this.state.host + '/view', {\r\n      method: 'POST',\r\n      credentials: 'same-origin',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',        \r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: project,\r\n      \r\n      })\r\n    });\r\n    const body = await response.json();\r\n    if (response.status !== 200) {\r\n      alert(response.status + \" \" + response.statusText);  \r\n      throw Error(body.message);    \r\n    } \r\n  }\r\n\r\n  async requestDropdown(project, code) {\r\n    let result = null\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/dropdown', {\r\n      method: 'POST',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: project,\r\n        code: code\r\n      })\r\n      }).then(async (response) => {\r\n        if(!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          const body = await response.json();\r\n          if (body.error != null) {\r\n            alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n            let e = document.createEvent(\"MouseEvent\");\r\n            await this.logout(e);\r\n          } else {\r\n            result = body;   \r\n          }     \r\n        }\r\n      }).catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n    return result;\r\n  }\r\n\r\n  async requestFaults(project, code) {\r\n    let result = null\r\n    //if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/faults', {\r\n      method: 'POST',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: project,\r\n        code: code\r\n      })\r\n      }).then(async (response) => {\r\n        if(!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          const body = await response.json();\r\n          if (body.error != null) {\r\n            alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n            let e = document.createEvent(\"MouseEvent\");\r\n            await this.logout(e);\r\n          } else {\r\n            result = body;     \r\n          }     \r\n        }\r\n      }).catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    //}\r\n    return result;\r\n  }\r\n\r\n  async requestAge(project) {\r\n      await fetch('https://' + this.state.host + '/age', {\r\n      method: 'POST',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: project,\r\n      })\r\n      }).then(async (response) => {\r\n        if(!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          const body = await response.json();\r\n          if (body.error != null) {\r\n            alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n            let e = document.createEvent(\"MouseEvent\");\r\n            await this.logout(e);\r\n          } else {\r\n            this.buildAge(body.result);              \r\n          }     \r\n        }\r\n      }).catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      }); \r\n    //}\r\n  }\r\n\r\n  async requestPriority(project) {\r\n    //if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/priority', {\r\n      method: 'POST',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        project: project,\r\n      })\r\n      }).then(async (response) => {\r\n        if(!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          const body = await response.json();\r\n          if (body.error != null) {\r\n            alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n            let e = document.createEvent(\"MouseEvent\");\r\n            await this.logout(e);\r\n          } else {\r\n            this.buildPriority(body.priority);      \r\n          }     \r\n        }\r\n      }).catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      }); \r\n    //}\r\n  }\r\n\r\n  buildAge(ages) {\r\n    let arr = [];\r\n    let arrb = [];\r\n    if (ages[0].inspection === null) {\r\n      let filter = [];\r\n      this.setState({filterAges: filter});\r\n      return;\r\n    }\r\n    for (let i = 0; i < ages.length; i++) {\r\n      let inspection = ages[i].inspection; \r\n      if (inspection !== null) {\r\n        arrb.push(inspection);       \r\n        if(inspection === this.state.bucket ) {\r\n          arr.push(formatDate(inspection));  \r\n        } else {\r\n          arr.push(\"pre-\" + formatDate(this.state.bucket));  \r\n        }\r\n      }          \r\n    }\r\n    this.setState({filterAges: arrb})\r\n    this.setState({ages: arr});\r\n  }\r\n\r\n  /**\r\n   * Sets default bucket suffix for the project\r\n   * @param {the current project} project \r\n   */\r\n  buildBucket(project) {\r\n    let bucket = project.split(\"_\")[2];\r\n    let month = bucket.substring(0, 2);\r\n    let year = null;\r\n    if (bucket.length === 4) {\r\n      year = \"20\" + bucket.substring(2, 4)\r\n    } else {\r\n      year = bucket.substring(2, bucket.length);\r\n    }\r\n    return year + \"_\" + month;\r\n  }\r\n\r\n  buildPriority(priority) {\r\n    let arr = [];\r\n    let arrb = [];\r\n    for (let i = 0; i < priority.length; i++) {\r\n      if (priority[i] === 99) {\r\n        arr.push(\"Signage\");\r\n        arrb.push(99);\r\n      } else {\r\n        arr.push(this.state.priorityMode + \" \" + priority[i])\r\n        arrb.push(priority[i]);\r\n      }\r\n    }\r\n    arr.sort();\r\n    arr.push(\"Completed\");\r\n    arrb.push(98);\r\n    this.setState({filterPriorities: arrb});\r\n    this.setState({priorities: arr});\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param {event} e  - the menu clicked\r\n   */\r\n  removeLayer(e) {\r\n    window.sessionStorage.removeItem(\"state\");\r\n    window.sessionStorage.removeItem(\"centrelines\");\r\n    this.setState({objGLData: []});\r\n    this.setState({glpoints: []});\r\n    let glData = {centre: [], points: [], lines: []}\r\n      this.GLEngine.redraw(glData, false); //TODO fix up engine state\r\n    let layers = this.state.activeLayers;\r\n    for(var i = 0; i < layers.length; i += 1) {     \r\n      if (e.target.attributes.code.value === layers[i].code) {\r\n        layers.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n    //TODO clear the filter\r\n    this.setState({priorities: []});\r\n    this.setState({filter: []});\r\n    this.setState({filterDropdowns: []})\r\n    this.setState({filterPriorities: []})\r\n    this.setState({activeLayers: layers}); \r\n    this.setState({activeLayer: null}); \r\n    this.setState({ages: layers}); \r\n    this.setState({district: null});  \r\n\r\n  }\r\n\r\n  getBody(project) {\r\n    if (this.state.projectMode === \"road\") {\r\n      return JSON.stringify({\r\n        user: this.state.login,\r\n        project: project,\r\n        filter: this.state.filter,\r\n        priority: this.state.filterPriorities,\r\n        inspection: this.state.filterAges\r\n      })   \r\n    } else {\r\n      let filterObj = [];\r\n\r\n      for (let i = 0; i <  this.state.filterDropdowns.length; i++) {\r\n        let obj = {name: this.state.filterDropdowns[i].name, filter: this.state.filterDropdowns[i].filter}\r\n        filterObj.push(obj)\r\n      }\r\n      if (filterObj.length !==0) {\r\n        return JSON.stringify({\r\n          user: this.state.login,\r\n          project: project,\r\n          filter: this.state.filter,\r\n          //TODO temp hack should be dymnic array to hold footpath filters\r\n          priority: this.state.filterPriorities,\r\n          assets: this.state.filterDropdowns[0].filter,\r\n          faults: this.state.filterDropdowns[1].filter,\r\n          types: this.state.filterDropdowns[2].filter,\r\n          causes: this.state.filterDropdowns[3].filter})\r\n      }\r\n    }     \r\n  }\r\n\r\n  async sendData(project, data, endpoint) {\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + endpoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        \"authorization\": this.state.token,\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        user: this.state.login,\r\n        data: data,\r\n        project: project\r\n      })\r\n      }).then(async (response) => {\r\n        if(!response.ok) {\r\n          throw new Error(response.status);\r\n        } else {\r\n          const result = await response.json();\r\n          if (response.error != null) {\r\n            alert(`Error: ${response.error}\\nSession has expired - user will have to login again`);\r\n            let e = document.createEvent(\"MouseEvent\");\r\n            await this.logout(e);\r\n          } else {    \r\n            if (endpoint === '/update') {\r\n              this.filterLayer(this.state.activeProject, false);\r\n            }\r\n            alert(result.rows + '\\n' + result.errors);\r\n          }     \r\n        }\r\n      }).catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });   \r\n    }    \r\n  }\r\n\r\n/**\r\n * Fetches marker data from server using priority and filter\r\n * @param {String} project data to fetch\r\n */\r\n  async filterLayer(project, zoom) {\r\n    this.setState({spinner: true});\r\n      let body = this.getBody(project);\r\n      if (typeof body !== 'undefined') {\r\n        await fetch('https://' + this.state.host + '/layer', {\r\n          method: 'POST',\r\n          headers: {\r\n            \"authorization\": this.state.token,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: body\r\n          }).then(async (response) => {\r\n            if(!response.ok) {\r\n              throw new Error(response.status);\r\n            } else {\r\n              const body = await response.json();\r\n              if (body.error != null) {\r\n                alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n                let e = document.createEvent(\"MouseEvent\");\r\n                await this.logout(e);\r\n              } else {\r\n                await this.addGLGeometry(body.points, body.lines, body.type, zoom);\r\n              }     \r\n            }\r\n          })\r\n          // .catch((error) => {\r\n          //   console.log(\"error: \" + error);\r\n          //   //alert(error);\r\n          //   return;\r\n          // });   \r\n        }    \r\n      //}\r\n      \r\n  }\r\n\r\n  async loadCentreline(e) {\r\n    if (this.state.login !== \"Login\") {\r\n        await fetch('https://' + this.state.host + '/roads', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          code: \"900\",\r\n          menu: e.target.id,\r\n          user: this.state.login\r\n        })\r\n      })\r\n      .then(async(response) => {\r\n        const body = await response.json();\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n          let e = document.createEvent(\"MouseEvent\");\r\n          await this.logout(e);  \r\n        } else {\r\n          await this.addCentrelines(body);   \r\n        }\r\n      })\r\n      .catch((error) => {\r\n      console.log(\"error: \" + error);\r\n      alert(error);\r\n      return;\r\n    });   \r\n    }\r\n  }\r\n\r\n  async loadFilters(project) {\r\n      if (this.state.projectMode === \"footpath\") {\r\n        return;\r\n      } else {\r\n        await fetch('https://' + this.state.host + '/class', {\r\n          method: 'POST',\r\n          headers: {\r\n            \"authorization\": this.state.token,\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            user: this.state.login,\r\n            project: project\r\n          })\r\n        }).then(async (response) => {\r\n          const body = await response.json();\r\n          if (body.error != null) {\r\n            alert(`Error: ${body.error}\\nSession has expired - user will have to login again`);\r\n            let e = document.createEvent(\"MouseEvent\");\r\n            await this.logout(e);\r\n          } else {\r\n            this.setState({faultClass: body});\r\n          }   \r\n        })\r\n        .catch((error) => {\r\n          console.log(\"error: \" + error);\r\n          alert(error);\r\n          return;\r\n        }) \r\n       \r\n      } \r\n  }\r\n\r\n  async addNewUser(client, password) {\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/user', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          type: \"insert\",\r\n          user: this.state.login,\r\n          client: client,\r\n          password: password\r\n        })\r\n      }).then(async (response) => {\r\n        const body = await response.json();\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\n`);\r\n        } else {\r\n          if (body.success) {\r\n            alert(\"User: \" + client + \" created\")\r\n          } else {\r\n            alert(\"User: \" + client + \" failed to create\")\r\n          }\r\n        }   \r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n  }\r\n\r\n  getClient = async () => {\r\n    console.log(\"get client\")\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/usernames', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          type: \"select\",\r\n          user: this.state.login,\r\n        })\r\n      }).then(async (response) => {\r\n        const body = await response.json();\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\n`);\r\n        } else {\r\n          if (body.success) {\r\n            console.log(body);\r\n            this.customModal.current.setUsernames(body.usernames);\r\n          }\r\n        }   \r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n  }\r\n\r\n  selectProjects = async (client) => {\r\n    console.log(\"get projects\")\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/selectprojects', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          type: \"select\",\r\n          client: client,\r\n          user: this.state.login,\r\n        })\r\n      }).then(async (response) => {\r\n        const body = await response.json();\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\n`);\r\n        } else {\r\n          if (body.success) {\r\n            console.log(body);\r\n            //this.customModal.current.setUsernames(body.usernames);\r\n          }\r\n        }   \r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n  }\r\n\r\n  async deleteCurrentUser(client) {\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/user', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          type: \"delete\",\r\n          user: this.state.login,\r\n          client: client,\r\n        })\r\n      }).then(async (response) => {\r\n        const body = await response.json();\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\n`);\r\n        } else {\r\n          if (body.success) {\r\n            alert(\"User: \" + client + \" deleted\")\r\n          } else {\r\n            alert(\"User: \" + client + \" not found\")\r\n          }\r\n        }   \r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n  }\r\n\r\n  async deleteCurrentProject(project, parent) {\r\n    console.log(project);\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/project', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          user: this.state.login,\r\n          type: \"delete\",\r\n          project: project,\r\n          parent: parent\r\n        })\r\n      }).then(async (response) => {\r\n        const body = await response.json();\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\n`);\r\n        } else {\r\n          if (body.parent) {\r\n            alert(body.rows +  '\\n Parent project deleted')\r\n          }\r\n            alert(body.rows)\r\n        }   \r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n  }\r\n\r\n  async addNewProject(code, client, description, date, tacode, amazon, surface) {\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/project', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          user: this.state.login,\r\n          type: \"insert\",\r\n          code: code,\r\n          client: client,\r\n          description: description,\r\n          date: date,\r\n          tacode: tacode,\r\n          amazon: amazon,\r\n          surface: surface\r\n        })\r\n      }).then(async (response) => {\r\n        const body = await response.json();\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\n`);\r\n        } else {\r\n          if (body.success) {\r\n            alert(\"Project: \" + code + \" created\")\r\n          } else {\r\n            alert(\"Project: \" + code + \"  failed to create\")\r\n          }\r\n        }   \r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n  }\r\n\r\n  async updateStatusAsync(marker, status, date) {\r\n    if (date === \"\") {\r\n      date = null;\r\n    }\r\n    if (status === \"active\") {\r\n      date = null;\r\n    }\r\n    if (this.state.login !== \"Login\") {\r\n      await fetch('https://' + this.state.host + '/status', {\r\n        method: 'POST',\r\n        headers: {\r\n          \"authorization\": this.state.token,\r\n          'Accept': 'application/json',\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          user: this.state.login,\r\n          project: this.state.activeProject,\r\n          status: status,\r\n          marker: marker,\r\n          date: date\r\n        })\r\n      }).then(async (response) => {\r\n        const body = await response.json();\r\n        console.log(body);\r\n        if (body.error != null) {\r\n          alert(`Error: ${body.error}\\n`);\r\n        } else {\r\n          if (body.rows != null) {\r\n            this.filterLayer(this.state.activeProject, false);\r\n          }\r\n        }   \r\n      })\r\n      .catch((error) => {\r\n        console.log(\"error: \" + error);\r\n        alert(error);\r\n        return;\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Shows modal to update fault status\r\n   * @param {event} e \r\n   */\r\n  // clickUpdateFaultStatus(e) {\r\n    \r\n  //   if (this.state.activeLayers.length > 0) {\r\n  //     this.customModal.current.setState({name: 'import'});\r\n  //     this.customModal.current.setProject(this.state.activeLayers[0].code);\r\n  //     this.customModal.current.setShow(true);\r\n  //   } else {\r\n  //     //Todo add alert\r\n  //   }\r\n    \r\n  // }\r\n\r\n  clickLogin(e) {\r\n    e.preventDefault();\r\n    this.setState({showLogin: true});   \r\n  }\r\n\r\n  clickAbout(e) {\r\n    this.setState({showAbout: true});  \r\n  }\r\n\r\n  clickTerms(e) {\r\n    this.setState({showTerms: true});  \r\n  }\r\n\r\n  clickContact(e) {\r\n    this.setState({showContact: true});  \r\n  }\r\n\r\n  clickClose(e) {\r\n    this.setState({showContact: false});\r\n    this.setState({showAbout: false});    \r\n    this.setState({showTerms: false});    \r\n  }\r\n\r\n  clickPage(index) {\r\n    this.setState({pageActive: index});\r\n    this.getFaultTypes(this.state.faultClass[index].code);\r\n  }\r\n\r\n  /**\r\n   * adds or removes fault to array  which keeps track of which faults are checked in the filter modal\r\n   * @param {event} e \r\n   */\r\n  clickCheck(e, value, input) {\r\n    //if checked true we are adding values to arr\r\n    if (value.filter.length <= 1 && e.target.checked) {\r\n      return;\r\n    }\r\n    this.applyRef.current.innerHTML = \"Apply Filter\";\r\n    if (e.target.checked) {\r\n      for (let i = 0; i < value.filter.length; i += 1) {\r\n          if (input === value.filter[i]) {\r\n              value.filter.splice(i, 1);\r\n              break;\r\n          }\r\n      }\r\n      e.target.checked = false;\r\n    } else {\r\n        value.filter.push(input);\r\n        e.target.checked = true;\r\n    }\r\n    this.setState({filter: this.rebuildFilter()})\r\n  }\r\n\r\n  clickActive(e, index) {\r\n    e.target.checked ? this.state.filterDropdowns[index].setActive(false) : this.state.filterDropdowns[index].setActive(true);\r\n\r\n  }\r\n\r\n\r\n\r\n  isActive(value, index) {\r\n    return this.state.filterDropdowns[index].isActive();\r\n  }\r\n\r\n  changeActive(e) {\r\n    console.log(e.target);\r\n  }\r\n\r\n  /**\r\n   * Copies the lat lng from photo modal to users clipboard\r\n   * @param {*} e button lcick event\r\n   * @param {*} latlng Leaflet latlng object\r\n   */\r\n  copyToClipboard(e, latlng) {\r\n    e.preventDefault();\r\n    const position = latlng.lat + \" \" + latlng.lng\r\n    navigator.clipboard.writeText(position);\r\n  }\r\n\r\n  selectLayer(e, index) {\r\n    console.log(this.state.activeLayers[index]);\r\n    this.setState({activeLayer: this.state.activeLayers[index]});\r\n  }\r\n/**\r\n * Clears all the checkboxes and filter for that dropdown\r\n * @param {event} e \r\n * @param {DynmaicDropdown} value \r\n */\r\n  onClear(e, value) {\r\n    value.clearFilter();\r\n  }\r\n\r\n  /**\r\n   * Checks is dropdown box is checked or unchecked\r\n   * @param {DynmaicDropdown} value \r\n   */\r\n  isInputActive(value) {\r\n    return value.active\r\n  }\r\n\r\n  /**\r\n * Selects all the checkboxes and filter for that dropdown\r\n * @param {event} e \r\n * @param {DynmaicDropdown} value \r\n */\r\n  onSelect(e, value) {\r\n    value.initialiseFilter();\r\n  }\r\n\r\n  /**\r\n   * Fires when user clicks apply button. \r\n   * @param {event} e \r\n   */\r\n  clickApply(e) {\r\n    e.preventDefault();\r\n    if (e.target.innerHTML === \"Apply Filter\") {\r\n      e.target.innerHTML = \"Clear Filter\";\r\n      this.filterLayer(this.state.activeProject, false);\r\n    } else {\r\n      e.target.innerHTML = \"Apply Filter\";  \r\n      this.resetDropdowns();\r\n      let filter = this.rebuildFilter();\r\n      this.setState({\r\n        filter: filter\r\n      }, () => {\r\n        this.filterLayer(this.state.activeProject, false);\r\n      });  \r\n    }\r\n  }\r\n\r\n  clickSelect(e, value) {\r\n    this.applyRef.current.innerHTML = \"Apply Filter\";\r\n    if (e.target.checked) {\r\n      value.filter = [];\r\n      value.active = false\r\n    } else {\r\n      value.filter = [...value.data.result]\r\n      value.active = true;\r\n    }\r\n    this.setState({filter: this.rebuildFilter()});\r\n  }\r\n\r\n  resetDropdowns() {\r\n    let filter = [];\r\n    for (let i = 0; i < this.state.filterDropdowns.length; i++) {\r\n      this.state.filterDropdowns[i].setActive(true);\r\n      this.state.filterDropdowns[i].setFilter([...this.state.filterDropdowns[i].data.result]);\r\n      filter.push(this.state.filterDropdowns[i].filter);\r\n    }\r\n  }\r\n\r\n  rebuildFilter() {\r\n    let filter = [];\r\n    for (let i = 0; i < this.state.filterDropdowns.length; i++) {\r\n      for (let j = 0; j < this.state.filterDropdowns[i].filter.length; j++) {\r\n        filter.push(this.state.filterDropdowns[i].filter[j]);\r\n      }\r\n    }\r\n    return filter \r\n    \r\n  }\r\n\r\n  clickAges(e, index) {\r\n    let query = this.state.filterAges;\r\n    let date = null;\r\n    if (index === 1) {\r\n      console.log(e.target.id);\r\n      date = this.state.bucket;\r\n    } else {\r\n      date = '2020_02';\r\n    }\r\n    if (query.length === 1) {\r\n      if (e.target.checked) {\r\n        query.push(date);\r\n      } else {\r\n        e.target.checked = true; \r\n      }\r\n    } else {\r\n      if (e.target.checked) {\r\n        query.push(date);\r\n      } else {\r\n        query.splice(query.indexOf(date), 1 );\r\n      }\r\n    }\r\n    this.filterLayer(this.state.activeProject, false); //fetch layer  \r\n  }\r\n\r\n  /**\r\n * checks if each fault is checked by searching checkedFault array\r\n * @param {the dropdown} value \r\n * * @param {the index of the fault within the dropdown} index \r\n * @return {}\r\n */\r\n   isChecked(input, filter) {\r\n    if (filter.includes(input)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  isPriorityChecked(value) {\r\n    let filter = this.state.filterPriorities;\r\n    //console.log(filter);\r\n    let priority = this.parsePriority(value);\r\n    if (filter.includes(priority)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }  \r\n  }\r\n\r\n  parsePriority(id) {\r\n    let priority = null\r\n    if (id === \"Signage\") {\r\n      priority = 99;\r\n    } else if (id === \"Completed\") {\r\n      priority = 98;\r\n    } else {\r\n      let p = id.substring(id.length - 1, id.length)\r\n      priority = parseInt(p);\r\n    }\r\n    return priority;\r\n  }\r\n\r\n  /**\r\n   * Adds or removes priorities to array for db query\r\n   * @param {the button clicked} e \r\n   */\r\n  clickPriority(e) {\r\n    console.log(this.state.activeLayer)\r\n    if(this.state.activeLayer) {\r\n      return;\r\n    }\r\n    let query = this.state.filterPriorities;\r\n    let priority = this.parsePriority(e.target.id);\r\n    if (query.length === 1) {\r\n      if (e.target.checked) {\r\n        e.target.checked = true; \r\n      } else {\r\n        query.push(priority);     \r\n      }\r\n    } else {\r\n      if (e.target.checked) { \r\n        query.splice(query.indexOf(priority), 1 );\r\n      } else {     \r\n        query.push(priority);\r\n      }\r\n    }\r\n    this.setState({filterPriorities: query})\r\n    this.filterLayer(this.state.activeProject, false);\r\n  }\r\n\r\n\r\n  clickRuler(e) {\r\n    this.setState({ruler: true});\r\n  }\r\n\r\n  clickArchive(e) {\r\n    if (this.state.isArchive) {\r\n      this.setState({archiveMarker: []});\r\n      this.setState({isArchive: false});\r\n    } else {\r\n      this.setState({isArchive: true});\r\n    }\r\n  }\r\n\r\n  clickVideo() {\r\n    console.log(this.state.isVideo);\r\n    if (this.state.isVideo) {\r\n      this.setState({isVideo: false});\r\n    } else {\r\n      this.setState({isVideo: true});\r\n    }\r\n    console.log(this.state.isVideo);\r\n  }\r\n\r\n\r\n  // async reverseLookup(data) {\r\n  //   console.log(data);\r\n  //   const response = await fetch(\"https://nominatim.openstreetmap.org/reverse?format=json&lat=\" + data.latitude + \"&lon=\" \r\n  //    + data.longitude + \"&addressdetails=1\", {\r\n  //     method: 'GET',\r\n  //     credentials: 'same-origin',\r\n  //     headers: {\r\n  //       'Accept': 'application/json',\r\n  //       'Content-Type': 'application/json',        \r\n  //     },\r\n  //   });  \r\n  // }\r\n\r\n    /**\r\n   * gets the requested attribute from the fault object array\r\n   * @param {the index of marker} index \r\n   * @param {the property of the fault} attribute \r\n   */\r\n  getGLFault(index, attribute) {\r\n    if (this.state.selectedGeometry.length !== 0 && index !== null) {\r\n      switch(attribute) {\r\n        case \"type\":\r\n          return  this.state.objGLData[index].type;\r\n        case \"fault\":\r\n          return  this.state.objGLData[index].fault;\r\n        case \"priority\":        \r\n          return  this.state.objGLData[index].priority;\r\n        case \"inspection\":        \r\n          return  this.state.objGLData[index].inspection;\r\n        case \"location\":\r\n          return  this.state.objGLData[index].location;\r\n        case \"width\":\r\n          return  this.state.objGLData[index].width;\r\n        case \"length\":\r\n          return  this.state.objGLData[index].length;\r\n        case \"datetime\":\r\n          return  this.state.objGLData[index].datetime;\r\n        case \"photo\":\r\n          return  this.state.objGLData[index].photo;\r\n        case \"repair\":\r\n            return  this.state.objGLData[index].repair;\r\n        case \"comment\":\r\n            return  this.state.objGLData[index].comment;\r\n        case \"latlng\":\r\n            return  this.state.objGLData[index].latlng;\r\n        default:\r\n          return this.state.objGLData[index]\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n// Admin\r\n  addUser(e) {\r\n    this.customModal.current.setShow(true);\r\n    this.customModal.current.setState({name: 'user'});\r\n  }\r\n\r\n  addProject(e) {\r\n    this.customModal.current.setState({name: 'project'});\r\n    this.customModal.current.setShow(true);\r\n  }\r\n\r\n  importData(e) {\r\n    this.customModal.current.setState({name: 'import'});\r\n    this.customModal.current.setShow(true);\r\n  }\r\n\r\n  fileLoaded(project, data, status) {\r\n    this.customModal.current.setShow(false);\r\n    if (status) {\r\n      this.sendData(project, data, '/update');\r\n    } else {\r\n      this.sendData(project, data, '/import');\r\n    }\r\n  }\r\n\r\n  createUser = (name, password) => {\r\n    this.addNewUser(name, password);\r\n    this.customModal.current.setShow(false);\r\n  }\r\n\r\n  deleteUser = (name) => {\r\n    this.deleteCurrentUser(name);\r\n    this.customModal.current.setShow(false);\r\n  }\r\n\r\n  deleteProject = (project, parent) => {\r\n    console.log(\"delete\")\r\n    this.deleteCurrentProject(project, parent);\r\n    this.customModal.current.setShow(false);\r\n  }\r\n\r\n  createProject = (code, client, description, date, tacode, amazon, surface) => {\r\n    this.addNewProject(code, client, description, date, tacode, amazon, surface);\r\n    this.customModal.current.setShow(false);\r\n  }\r\n\r\n  updateStatus(marker, status) {\r\n    this.updateStatusAsync(marker, status);\r\n  }\r\n\r\n  CLNotificaton = (props) => {\r\n    if (props.show) {\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const centre = [this.state.location.lat, this.state.location.lng];\r\n\r\n    const LayerNav = (props) => { \r\n      if (props.user === 'admin') {\r\n        return (\r\n          <Nav>       \r\n          <NavDropdown className=\"navdropdown\" title=\"Tools\" id=\"basic-nav-dropdown\">\r\n            <NavDropdown.Item  \r\n              className=\"adminitem\" \r\n              title=\"Add New User\" \r\n              onClick={props.addUser}>\r\n              Manage User     \r\n            </NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item\r\n              title=\"Add New Project\" \r\n              className=\"adminitem\" \r\n              onClick={props.addProject}>\r\n              Manage Projects \r\n              </NavDropdown.Item>\r\n              <NavDropdown.Divider /> \r\n            <NavDropdown.Item  \r\n              title=\"Import\" \r\n              className=\"adminitem\" \r\n              projects={props.layers} \r\n              admin={props.admin}\r\n              onClick={props.importData}>\r\n              Import Data    \r\n            </NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n          </NavDropdown>\r\n        </Nav>\r\n        );\r\n      } else {\r\n        if (props.layers.length > 0) {\r\n            return (\r\n              <Nav>          \r\n              <NavDropdown className=\"navdropdown\" title=\"Projects\" id=\"basic-nav-dropdown\">\r\n                <CustomMenu \r\n                  title=\"Add Roading Layer\" \r\n                  className=\"navdropdownitem\" \r\n                  type={'road'} \r\n                  projects={props.projects.road} \r\n                  onClick={props.loadLayer}/>\r\n                  <NavDropdown.Divider />\r\n                <CustomMenu \r\n                  title=\"Add Footpath Layer\" \r\n                  className=\"navdropdownitem\" \r\n                  type={'footpath'} \r\n                  projects={props.projects.footpath} \r\n                  onClick={props.loadFootpathLayer}/>\r\n                  <NavDropdown.Divider />\r\n                <CustomMenu \r\n                  title=\"Remove Layer\" \r\n                  className=\"navdropdownitem\" \r\n                  projects={props.layers} \r\n                  onClick={props.removeLayer}/>\r\n              </NavDropdown>\r\n            </Nav>\r\n            );     \r\n        } else {\r\n          return (\r\n            <Nav>          \r\n            <NavDropdown className=\"navdropdown\" title=\"Projects\" id=\"basic-nav-dropdown\">\r\n              <CustomMenu \r\n                title=\"Add Roading Layer\" \r\n                className=\"navdropdownitem\" \r\n                type={'road'} \r\n                projects={props.projects.road} \r\n                layers={props.layers} \r\n                onClick={props.loadRoadLayer}/>\r\n              <CustomMenu \r\n                title=\"Add Footpath Layer\" \r\n                className=\"navdropdownitem\" \r\n                type={'footpath'}\r\n                projects={props.projects.footpath} \r\n                layers={props.layers} \r\n                onClick={props.loadFootpathLayer}/>\r\n            </NavDropdown>        \r\n          </Nav>\r\n          );\r\n        }\r\n      }\r\n      \r\n    }\r\n    const CustomMenu = (props) => {\r\n      if (typeof props.projects === 'undefined' || props.projects.length === 0) {\r\n          return (  \r\n            null  \r\n            );\r\n      } else {  \r\n        return (        \r\n          <NavDropdown title={props.title} className=\"navdropdownitem\" drop=\"right\">\r\n            {props.projects.map((value, index) =>  \r\n            <Fragment key={`${index}`}>\r\n  \t          <NavDropdown.Item className=\"navdropdownitem\"\r\n                key={`${index}`}\r\n                index={index}\r\n                title={value.code}\r\n                code={value.code}\r\n                onClick={props.onClick}>\r\n                {value.description + \" \" + value.date}\r\n              </NavDropdown.Item>\r\n            </Fragment>              \r\n            )}\r\n            <NavDropdown.Divider />\r\n          </NavDropdown>\r\n          );\r\n      }\r\n    }\r\n\r\n    const CustomPopup = (props) => {\r\n      let location = props.data.location;\r\n      if (props.data.type === \"footpath\") {\r\n        location = props.data.roadname;\r\n      }\r\n      return (\r\n        <Popup className=\"popup\" position={props.position}>\r\n          <div>\r\n            <p className=\"faulttext\">\r\n            <b>{\"ID: \"}</b>{props.data.id}<br></br>\r\n              <b>{\"Type: \"}</b>{props.data.fault}<br></br>\r\n              <b>{\"Location: \"}</b>{location}<br></br>\r\n              <b>{\"Date: \"}</b>{props.data.datetime} \r\n            </p>\r\n            <div>\r\n              <Image className=\"thumbnail\" \r\n                src={props.src}\r\n                onClick={props.onClick} \r\n                thumbnail={true}>\r\n              </Image >\r\n            </div>          \r\n          </div>\r\n        </Popup>  \r\n      );      \r\n    }\r\n\r\n    const CustomSpinner = (props) => {\r\n      if (props.show) {\r\n        return(\r\n          <div className=\"spinner\">\r\n          <Spinner\r\n          as=\"span\"\r\n          animation=\"border\"\r\n          variant=\"secondary\"\r\n          size=\"lg\"\r\n          role=\"status\"\r\n          ></Spinner>\r\n          <p>Loading...</p>\r\n          </div>\r\n        );\r\n      } else {\r\n        return(\r\n          null\r\n        );    \r\n      }  \r\n    }\r\n\r\n    const CustomLink = (props) => {\r\n      if (props.endpoint === \"/data\") {\r\n        return (null);\r\n      }\r\n      if (this.state.activeLayer === null) {\r\n        return(null);\r\n      } else {\r\n        return (\r\n          <Link \r\n            className=\"dropdownlink\" \r\n            to={{\r\n              pathname: props.endpoint,\r\n              login: this.customNav.current,\r\n              user: this.state.login,\r\n              data: this.state.objGLData,\r\n              project: this.state.activeLayer\r\n            }}\r\n            style={{ textDecoration: 'none' }}\r\n            >{props.label}\r\n          </Link>\r\n        );\r\n      }      \r\n    }\r\n\r\n    \r\n\r\n    return ( \r\n      <> \r\n        <div>        \r\n          <Navbar bg=\"light\" expand=\"lg\">      \r\n            <Navbar.Brand href=\"#home\">\r\n            <img\r\n                src=\"logo.png\"\r\n                width=\"122\"\r\n                height=\"58\"\r\n                className=\"d-inline-block align-top\"\r\n                alt=\"logo\"\r\n              />\r\n            </Navbar.Brand>\r\n            <LayerNav \r\n              project={this.state.activeProject} \r\n              projects={this.getProjects()} \r\n              layers={this.state.activeLayers}\r\n              user={this.state.login}\r\n              removeLayer={(e) => this.removeLayer(e)} \r\n              loadRoadLayer={(e) => this.loadLayer(e, 'road')} \r\n              loadFootpathLayer={(e) => this.loadLayer(e, 'footpath')}\r\n              addUser={(e) => this.addUser(e)} \r\n              addProject={(e) => this.addProject(e)} \r\n              importData={(e) => this.importData(e)} \r\n              >\r\n            </LayerNav>\r\n            <Nav>              \r\n              <NavDropdown \r\n                className=\"navdropdown\" \r\n                title=\"Data\" \r\n                id=\"basic-nav-dropdown\"\r\n                >\r\n                <CustomLink \r\n                  className=\"dropdownlink\" \r\n                  endpoint=\"/data\"\r\n                  label=\"Table View\"\r\n                  style={{ textDecoration: 'none' }}\r\n                  >\r\n                 </CustomLink>      \r\n              </NavDropdown>         \r\n            </Nav>\r\n            <Nav>\r\n              <NavDropdown className=\"navdropdown\" title=\"Report\" id=\"basic-nav-dropdown\">         \r\n                  <CustomLink \r\n                    className=\"dropdownlink\" \r\n                    endpoint=\"/statistics\"\r\n                    label=\"Create Report\"\r\n                    style={{ textDecoration: 'none' }}\r\n                    >\r\n                  </CustomLink>\r\n                {/* </NavDropdown.Item>  */}         \r\n                </NavDropdown>   \r\n            </Nav>\r\n            <Nav>\r\n              <NavDropdown className=\"navdropdown\" title=\"Help\" id=\"basic-nav-dropdown\">\r\n                <NavDropdown.Item className=\"navdropdownitem\" onClick={(e) => this.clickTerms(e)} >Terms of Use</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item className=\"navdropdownitem\" onClick={(e) => this.clickContact(e)} >Contact</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item className=\"navdropdownitem\" id=\"Documentation\" onClick={(e) => this.documentation(e)}>Documentation</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n                <NavDropdown.Item className=\"navdropdownitem\" onClick={(e) => this.clickAbout(e)} >About</NavDropdown.Item>             \r\n              </NavDropdown>         \r\n            </Nav>\r\n            <CustomNav ref={this.customNav} className=\"navdropdown\"/>\r\n            <SearchBar ref={this.searchRef} district={this.state.district}></SearchBar>\r\n          </Navbar>         \r\n        </div>      \r\n        <div className=\"map\"> \r\n        <Roadlines \r\n          ref={this.roadLinesRef} >\r\n        </Roadlines> \r\n       {/* <ERPNotification ref={this.notificationRef} show={true}>\r\n\r\n       </ERPNotification> */}\r\n        <LMap        \r\n          ref={(ref) => {this.map = ref;}}\r\n          className=\"map\"\r\n          worldCopyJump={true}\r\n          boxZoom={true}\r\n          center={centre}\r\n          zoom={this.state.zoom}\r\n          doubleClickZoom={false}\r\n          onPopupClose={(e) => this.closePopup(e)}>\r\n          <TileLayer className=\"mapLayer\"\r\n            attribution={this.state.attribution}\r\n            url={this.state.url}\r\n            zIndex={998}\r\n            maxNativeZoom={19}\r\n            maxZoom={22}\r\n          />\r\n          <AntDrawer ref={this.antdrawer} video={this.state.hasVideo}>\r\n          </AntDrawer>\r\n          <ScaleControl className=\"scale\"/>\r\n          <div className=\"btn-group\">\r\n          {this.state.filterDropdowns.map((value, indexNo) =>\r\n            <Dropdown \r\n              className=\"button\"\r\n              key={`${indexNo}`}     \r\n              >                \r\n              <Dropdown.Toggle variant=\"light\" size=\"sm\">\r\n                <input\r\n                  key={`${indexNo}`} \r\n                  id={value} \r\n                  type=\"checkbox\" \r\n                  checked={value.active} \r\n                  onChange={(e) => this.changeActive(e)}\r\n                  onClick={(e) => this.clickSelect(e, value)}\r\n                  >\r\n                </input>\r\n                {value.name}         \r\n              </Dropdown.Toggle>\r\n              <Dropdown.Menu className=\"custommenu\">\r\n                {value.data.result.map((input, index) =>\r\n                  <div key={`${index}`}>\r\n                    <input\r\n                      key={`${index}`} \r\n                      id={input} \r\n                      type=\"checkbox\" \r\n                      checked={this.isChecked(input, value.filter)} \r\n                      onClick={(e) => this.clickCheck(e, value, input)}\r\n                      onChange={(e) => this.changeCheck(e)}\r\n                      >\r\n                    </input>{\" \" + input}<br></br>\r\n                  </div> \r\n                  )}\r\n                <Dropdown.Divider />\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n          )}\r\n          <FilterButton ref={this.applyRef} layer={this.state.activeLayer} onClick={(e) => this.clickApply(e)}>  \r\n          </FilterButton>\r\n          </div>\r\n          <Dropdown className=\"Priority\">\r\n          <Dropdown.Toggle variant=\"light\" size=\"sm\" >\r\n              {this.state.priorityMode}\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu className=\"custommenu\">\r\n            {this.state.priorities.map((value, index) =>\r\n                <div key={`${index}`}>\r\n                 <CustomSVG \r\n                 login={this.state.login}\r\n                 value={value}\r\n                 reverse={this.state.reverse}\r\n                 >\r\n                 </CustomSVG>\r\n                  <input\r\n                    key={`${index}`} \r\n                    id={value} \r\n                    type=\"checkbox\" \r\n                    //defaultChecked\r\n                    checked={this.isPriorityChecked(value)} \r\n                    onChange={(e) => this.changeCheck(e)} \r\n                    onClick={(e) => this.clickPriority(e, value)}>\r\n                  </input>{\" \" + value}\r\n                  <br></br>\r\n                </div> \r\n                )}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n          <Dropdown\r\n            className=\"Age\">\r\n          <Dropdown.Toggle variant=\"light\" size=\"sm\" >\r\n              Inspection Date\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu className=\"agemenu\">\r\n            {this.state.ages.map((value, index) =>\r\n                <div key={`${index}`}>\r\n                 <CustomSVG\r\n                  login={this.state.login}\r\n                  value={value}\r\n                  color={\"magenta\"}\r\n                  bucket={formatDate(this.state.bucket)}>\r\n                 </CustomSVG>\r\n                 <CustomSVG \r\n                  login={this.state.login}\r\n                  value={value}\r\n                  color={\"darkorange\"}\r\n                  bucket={formatDate(this.state.bucket)}>\r\n                 </CustomSVG>\r\n                 <CustomSVG \r\n                  login={this.state.login}\r\n                  value={value}\r\n                  color={\"limegreen\"}\r\n                  bucket={formatDate(this.state.bucket)}>\r\n                </CustomSVG>\r\n                <CustomSVG \r\n                  login={this.state.login}\r\n                  value={value}\r\n                  color={\"blue\"}\r\n                  bucket={formatDate(this.state.bucket)}> \r\n                 </CustomSVG>\r\n                  <input\r\n                    key={`${index}`} \r\n                    id={value} \r\n                    type=\"checkbox\" \r\n                    defaultChecked \r\n                    onClick={(e) => this.clickAges(e, index)}>\r\n                  </input>{\" \" + value}\r\n                  <br></br>\r\n                </div> \r\n                )}\r\n            </Dropdown.Menu>\r\n          </Dropdown>\r\n          \r\n          {this.state.archiveMarker.map((position, idx) =>\r\n            <Marker \r\n              key={`marker-${idx}`} \r\n              position={position}>\r\n            </Marker>\r\n          )}\r\n          {this.state.carMarker.map((position, idx) =>\r\n            <Marker \r\n              key={`marker-${idx}`} \r\n              position={position}>\r\n            </Marker>\r\n          )}\r\n          {this.state.selectedCarriage.map((position, idx) =>\r\n            <Polyline\r\n              key={`marker-${idx}`} \r\n              position={position}>\r\n            </Polyline>\r\n          )}\r\n          <VideoCard\r\n            ref={this.videoCard}\r\n            show={this.state.showVideo} \r\n            parent={this}\r\n          >\r\n          </VideoCard>\r\n          \r\n          <LayerGroup >\r\n            {this.state.selectedGeometry.map((obj, index) =>  \r\n            <CustomPopup \r\n              key={`${index}`} \r\n              data={obj}\r\n              position={obj.latlng}\r\n              src={this.state.amazon + obj.photo + \".jpg\"} \r\n              onClick={(e) => this.clickImage(e)}>\r\n            </CustomPopup>\r\n            )}\r\n          </LayerGroup>\r\n          {/* notworking!! */}\r\n         \r\n      </LMap >    \r\n      </div>\r\n      <CustomSpinner show={this.state.spinner}>\r\n      </CustomSpinner>\r\n      <Image \r\n        className=\"satellite\" \r\n        src={this.state.osmThumbnail} \r\n        onClick={(e) => this.toogleMap(e)} \r\n        thumbnail={true}\r\n      />\r\n       {/* admin modal     */}\r\n       <CustomModal \r\n        name={'user'}\r\n        show={this.state.showAdmin} \r\n        ref={this.customModal}\r\n        token={this.state.token}\r\n        host={this.state.host}\r\n        callbackUser={this.createUser} //insert user\r\n        callbackDeleteUser={this.deleteUser}\r\n        callbackProject={this.createProject}\r\n        callbackDeleteProject={this.deleteProject}\r\n        callbackImportData={this.importData}\r\n        callbackGetClient={this.getClient}\r\n        callbackGetProjects={this.selectProjects}\r\n        >\r\n       </CustomModal>\r\n      <Modal className=\"termsModal\" show={this.state.showTerms} size={'md'} centered={true}>\r\n        <Modal.Header>\r\n          <Modal.Title><h2>Road Inspection Viewer</h2></Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body >\t\r\n          By using this software you confirm you have read and agreed to the Onsite Developments Ltd. <a href={\"https://osmium.nz/?#terms\"}> Click for terms of use.</a><br></br>\r\n          All data on this site from Land Information New Zealand is made available under a Creative Commons Attribution Licence.<br></br>\r\n          <span >&copy; 2019 Onsite Developments Ltd. All rights reserved.</span><br></br>\r\n\t\t    </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button \r\n            variant=\"primary\" \r\n            type=\"submit\" \r\n            onClick={(e) => this.clickClose(e)}>\r\n              Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <Modal \r\n        className=\"aboutModal\" \r\n        show={this.state.showAbout} \r\n        size={'md'} centered={true}>\r\n        <Modal.Header>\r\n          <Modal.Title><h2>About</h2> </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body >\t\r\n          <b>Road Inspection Version 2.1</b><br></br>\r\n          Relased: 23/04/2020<br></br>\r\n          Company: Onsite Developments Ltd.<br></br>\r\n          Software Developer: Matt Wynyard <br></br>\r\n          <img src=\"logo192.png\" alt=\"React logo\"width=\"24\" height=\"24\"/> React<br></br>\r\n          <img src=\"webgl.png\" alt=\"WebGL logo\" width=\"60\" height=\"24\"/> WebGL<br></br>\r\n          <img src=\"bootstrap.png\" alt=\"Bootstrap logo\" width=\"24\" height=\"24\"/> Bootstrap<br></br>\r\n          <img src=\"leafletlogo.png\" alt=\"Leaflet logo\" width=\"60\" height=\"16\"/> Leaflet<br></br>\r\n          <img src=\"reactbootstrap.png\" alt=\"React-Bootstrap logo\" width=\"24\" height=\"24\"/> React-bootstrap<br></br>\r\n          React-leaflet<br></br>\r\n\t\t    </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"primary\" size='sm' type=\"submit\" onClick={(e) => this.clickClose(e)}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      {/* login modal     */}\r\n      </Modal>\r\n      <Modal show={this.state.showLogin} size={'sm'} centered={true}>\r\n        <Modal.Header>\r\n          <Modal.Title><img src=\"padlock.png\" alt=\"padlock\" width=\"42\" height=\"42\"/> Login </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body >\t\r\n        <Form>\r\n          <Form.Group controlId=\"userName\">\r\n            <Form.Label>Username</Form.Label>\r\n            <Form.Control \r\n              type=\"text\" \r\n              placeholder=\"Enter username\" \r\n              ref={user => this.userInput = user} />\r\n          </Form.Group>\r\n          <Form.Text className= \"message\">{this.state.message}</Form.Text>\r\n          <Form.Group controlId=\"formBasicPassword\">\r\n            <Form.Label>Password</Form.Label>           \r\n            <Form.Control \r\n              type=\"password\" \r\n              placeholder=\"Password\" \r\n              ref={(key=> this.passwordInput = key)}/>\r\n          </Form.Group>\r\n          <Button \r\n            variant=\"primary\" \r\n            type=\"submit\" \r\n            onClick={(e) => this.login(e)}>\r\n            Submit\r\n          </Button>\r\n        </Form>\r\n\t\t    </Modal.Body>\r\n        <Modal.Footer>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      <PhotoModal\r\n        ref={this.photoModal}\r\n      >\r\n      </PhotoModal>\r\n      <ArchivePhotoModal\r\n        ref={this.archivePhotoModal}\r\n        show={this.state.show} \r\n        amazon={this.state.amazon}\r\n        currentPhoto={this.state.currentPhoto}\r\n        project={this.state.activeLayer}\r\n      >\r\n      </ArchivePhotoModal>\r\n      </>\r\n    );\r\n  }\r\n  \r\n}\r\nexport default App;","S:\\website\\photoviewer\\client\\src\\CustomNav.js",[],"S:\\website\\photoviewer\\client\\src\\Drawer.js",[],"S:\\website\\photoviewer\\client\\src\\VideoCard.js",[],"S:\\website\\photoviewer\\client\\src\\CustomModal.js",[],"S:\\website\\photoviewer\\client\\src\\util.js",[],"S:\\website\\photoviewer\\client\\src\\PhotoModal.js",[],"S:\\website\\photoviewer\\client\\src\\ArchivePhotoModal.js",[],"S:\\website\\photoviewer\\client\\src\\components\\SearchBar.jsx",[],"S:\\website\\photoviewer\\client\\src\\GLEngine.js",[],"S:\\website\\photoviewer\\client\\src\\components\\CustomSVG.js",[],"S:\\website\\photoviewer\\client\\src\\DynamicDropdown.js",[],"S:\\website\\photoviewer\\client\\src\\PositionControl.js",[],"S:\\website\\photoviewer\\client\\src\\L.CanvasOverlay.js",[],"S:\\website\\photoviewer\\client\\src\\MediaPlayerControl.js",[],"S:\\website\\photoviewer\\client\\src\\components\\FilterButton.js",[],"S:\\website\\photoviewer\\client\\src\\shaders.js",[],"S:\\website\\photoviewer\\client\\src\\Vector2D.js",[],"S:\\website\\photoviewer\\client\\src\\components\\Fetcher.js",[],"S:\\website\\photoviewer\\client\\src\\components\\Roadlines.js",[],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","severity":1,"message":"127","line":143,"column":17,"nodeType":"128","messageId":"129","endLine":143,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":174,"column":17,"nodeType":"128","messageId":"129","endLine":174,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":203,"column":17,"nodeType":"128","messageId":"129","endLine":203,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":299,"column":13,"nodeType":"128","messageId":"129","endLine":299,"endColumn":16},{"ruleId":"130","severity":1,"message":"131","line":300,"column":13,"nodeType":"128","messageId":"132","endLine":300,"endColumn":23},{"ruleId":"126","severity":1,"message":"127","line":339,"column":13,"nodeType":"128","messageId":"129","endLine":339,"endColumn":16},{"ruleId":"130","severity":1,"message":"133","line":340,"column":13,"nodeType":"128","messageId":"132","endLine":340,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":370,"column":13,"nodeType":"128","messageId":"129","endLine":370,"endColumn":16},{"ruleId":"126","severity":1,"message":"134","line":371,"column":13,"nodeType":"128","messageId":"129","endLine":371,"endColumn":20},{"ruleId":"130","severity":1,"message":"135","line":371,"column":13,"nodeType":"128","messageId":"132","endLine":371,"endColumn":20},{"ruleId":"126","severity":1,"message":"127","line":399,"column":13,"nodeType":"128","messageId":"129","endLine":399,"endColumn":16},{"ruleId":"126","severity":1,"message":"136","line":400,"column":17,"nodeType":"128","messageId":"129","endLine":400,"endColumn":24},{"ruleId":"130","severity":1,"message":"137","line":400,"column":17,"nodeType":"128","messageId":"132","endLine":400,"endColumn":24},{"ruleId":"130","severity":1,"message":"138","line":4,"column":82,"nodeType":"128","messageId":"132","endLine":4,"endColumn":87},{"ruleId":"139","severity":1,"message":"140","line":433,"column":58,"nodeType":"141","messageId":"142","endLine":433,"endColumn":59},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],"no-redeclare","'ctx' is already defined.","Identifier","redeclared","no-unused-vars","'colorTable' is assigned a value but never used.","unusedVar","'g1Chart' is assigned a value but never used.","'g2Chart' is already defined.","'g2Chart' is assigned a value but never used.","'g3Chart' is already defined.","'g3Chart' is assigned a value but never used.","'Toast' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-global-assign","no-unsafe-negation"]